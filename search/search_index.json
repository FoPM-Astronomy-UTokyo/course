{"config":{"lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FoPM Learning Program (Astronomy) \u5909\u9769\u3092\u99c6\u52d5\u3059\u308b\u5148\u7aef\u7269\u7406\u30fb\u6570\u5b66\u30d7\u30ed\u30b0\u30e9\u30e0 \u5909\u9769\u3092\u99c6\u52d5\u3059\u308b\u5148\u7aef\u7269\u7406\u30fb\u6570\u5b66\u30d7\u30ed\u30b0\u30e9\u30e0 (FoPM) \u306f, \u4fee\u58eb\u535a\u58eb\u4e00\u8cab\u306e 5 \u5e74\u9593\u306e\u5b66\u4f4d\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u57fa\u790e\u79d1\u5b66\u306e\u5c02\u9580\u4eba\u6750\u306b, \u79d1\u5b66\u6280\u8853\u3084\u793e\u4f1a\u30a4\u30ce\u30d9\u30fc\u30b7\u30e7\u30f3\u306b\u5e83\u304f\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u30b9\u30ad\u30eb\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067, \u5f7c\u3089\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3092\u6700\u5927\u5316\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u3053\u306e\u30da\u30fc\u30b8\u3067\u306f FoPM \u3067\u5b9f\u65bd\u3057\u305f\u5b9f\u7fd2 (\u5929\u6587\u5b66) \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059. \u30c6\u30ad\u30b9\u30c8\u3078\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044. \u5b9f\u7fd2\u5e74\u5ea6 \u5b9f\u7fd2\u30bf\u30a4\u30c8\u30eb 2020 \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u5165\u9580","title":"\u30c8\u30c3\u30d7\u30da\u30fc\u30b8"},{"location":"#fopm-learning-program-astronomy","text":"","title":"FoPM Learning Program (Astronomy)"},{"location":"#_1","text":"\u5909\u9769\u3092\u99c6\u52d5\u3059\u308b\u5148\u7aef\u7269\u7406\u30fb\u6570\u5b66\u30d7\u30ed\u30b0\u30e9\u30e0 (FoPM) \u306f, \u4fee\u58eb\u535a\u58eb\u4e00\u8cab\u306e 5 \u5e74\u9593\u306e\u5b66\u4f4d\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u57fa\u790e\u79d1\u5b66\u306e\u5c02\u9580\u4eba\u6750\u306b, \u79d1\u5b66\u6280\u8853\u3084\u793e\u4f1a\u30a4\u30ce\u30d9\u30fc\u30b7\u30e7\u30f3\u306b\u5e83\u304f\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u305f\u3081\u306e\u30b9\u30ad\u30eb\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067, \u5f7c\u3089\u306e\u30dd\u30c6\u30f3\u30b7\u30e3\u30eb\u3092\u6700\u5927\u5316\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059. \u3053\u306e\u30da\u30fc\u30b8\u3067\u306f FoPM \u3067\u5b9f\u65bd\u3057\u305f\u5b9f\u7fd2 (\u5929\u6587\u5b66) \u306e\u30c6\u30ad\u30b9\u30c8\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059. \u30c6\u30ad\u30b9\u30c8\u3078\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304f\u3060\u3055\u3044. \u5b9f\u7fd2\u5e74\u5ea6 \u5b9f\u7fd2\u30bf\u30a4\u30c8\u30eb 2020 \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u5165\u9580","title":"\u5909\u9769\u3092\u99c6\u52d5\u3059\u308b\u5148\u7aef\u7269\u7406\u30fb\u6570\u5b66\u30d7\u30ed\u30b0\u30e9\u30e0"},{"location":"mcmc/","text":"\u306f\u3058\u3081\u306b \u3053\u306e\u5b9f\u7fd2\u3067\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 (Markov-Chain Monte Carlo; MCMC ) \u3092\u3068\u308a\u3042\u3064\u304b\u3044\u307e\u3059. MCMC \u306f\u3042\u308b\u78ba\u7387\u5206\u5e03\u304b\u3089, \u78ba\u7387\u5909\u6570\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3059. \u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u3068\u8a00\u3044\u63db\u3048\u3066\u3082\u3044\u3044\u3067\u3057\u3087\u3046. \u78ba\u7387\u5909\u6570 \\(x\\) \u304c\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u3068\u3057\u307e\u3059 1 . \u3053\u306e\u3053\u3068\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3057\u307e\u3059. \\[ x \\sim P(x). \\] \\(x\\) \u306f\u96e2\u6563\u5024\u3067\u3082\u9023\u7d9a\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c, \u3053\u3053\u3067\u306f\u4fbf\u5b9c\u7684\u306b\u9023\u7d9a\u3057\u305f\u5024\u3092\u3068\u308b\u3068\u3057\u307e\u3057\u3087\u3046. \\(x\\) \u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3067\u304d\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\left\\langle A(x) \\right\\rangle_{x \\sim P(x)} = \\int\\mathrm{d}x\\,A(x)P(x). \\] \u3082\u3057 \\(x\\) \u304c\u591a\u6b21\u5143\u306e\u91cf\u3067\u3042\u308c\u3070\u53f3\u8fba\u306e\u7a4d\u5206\u306f\u591a\u6b21\u5143\u7a7a\u9593\u3067\u306e\u7a4d\u5206\u306b\u306a\u308a\u307e\u3059. \u591a\u6b21\u5143\u3067\u306e\u7a4d\u5206\u306f\u4e00\u822c\u306b\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u9ad8\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059. \u4e00\u65b9\u3067, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570\u306e\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u7528\u3044\u308b\u3068, \u53f3\u8fba\u306e\u7a4d\u5206\u3092\u4ee5\u4e0b\u306e\u548c\u306b\u3088\u3063\u3066\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\int\\mathrm{d}x\\,A(x)P(x) \\simeq \\frac{1}{n}\\sum_{i=1}^{n} A(x_i). \\] \u3053\u308c\u306b\u3088\u3063\u3066\u3042\u3089\u3086\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u307e\u3063\u305f\u304f\u540c\u3058\u624b\u7d9a\u304d\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \\(x\\) \u304c\u96e2\u6563\u7684\u3067\u3042\u3063\u3066\u3082\u9023\u7d9a\u3067\u3042\u3063\u3066\u3082\u540c\u3058\u624b\u7d9a\u304d\u3067\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u3082\u3061\u308d\u3093, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570\u306e\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u52b9\u7387\u3088\u304f\u751f\u6210\u3059\u308b (\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3059\u308b) \u624b\u6cd5\u304c\u3042\u308b\u3053\u3068\u304c\u524d\u63d0\u3067\u3059. \u30b5\u30f3\u30d7\u30eb\u3059\u308b\u305f\u3081\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u7a4d\u5206\u3092\u4e0a\u56de\u3063\u3066\u3057\u307e\u3063\u3066\u306f\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093. \u305d\u3057\u3066 MCMC \u306f\u4f4e\u30b3\u30b9\u30c8\u3067\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u5f37\u529b\u306a\u624b\u6cd5\u3067\u3059. \u7279\u306b\u9ad8\u6b21\u5143\u7a7a\u9593\u3092\u5bfe\u8c61\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u5834\u5408\u3084, \u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u5834\u5408\u306b\u6d3b\u8e8d\u3057\u307e\u3059. \u4ee5\u4e0b\u3067\u306f, \u4f55\u6545 MCMC \u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304b\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3066, Python \u3067 MCMC \u3092\u52d5\u304b\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304d, \u3055\u307e\u3056\u307e\u306a\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059. \u30b3\u30f3\u30c6\u30f3\u30c4 \u4e71\u6570\u751f\u6210 \u2013 \u9006\u95a2\u6570\u6cd5\u3068\u68c4\u5374\u6cd5 \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u8a08\u7b97 \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0 \u52d5\u4f5c\u74b0\u5883 \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u306f Python 3.7.1 \u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u307e\u3059. \u4f7f\u7528\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059. \u3082\u3057\u30c6\u30ad\u30b9\u30c8\u306b\u8a18\u8f09\u3057\u3066\u3042\u308b\u30b3\u30fc\u30c9\u304c\u52d5\u304b\u306a\u3044\u5834\u5408\u306f, \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5dee\u304c\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044. astropy == 4.2 matplotlib == 3.3 . 4 numpy == 1.20 . 1 scipy == 1.3 . 0 \u3082\u3057, \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u304c\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u52d5\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u7ba1\u7406\u8005\u307e\u3067\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044. \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u69d8\u3005\u306a\u78ba\u7387\u5206\u5e03\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u306e\u3067, \u305d\u306e\u90fd\u5ea6\u65b0\u3057\u3044\u8a18\u53f7\u3092\u3042\u3066\u3066\u3044\u308b\u3068\u6587\u5b57\u304c\u67af\u6e07\u3057\u3066\u3057\u307e\u3044\u307e\u3059. \u305d\u3053\u3067\u78ba\u7387\u5909\u6570 \\(x\\) \u306e\u78ba\u7387\u5206\u5e03\u3092 \\(P(x)\\) \u3068\u8868\u8a18\u3057\u307e\u3059. \u78ba\u7387\u5909\u6570 \\(Y\\) \u306e\u78ba\u7387\u5206\u5e03\u306f \\(P(Y)\\) \u3067\u3059. \u6587\u5b57\u306f\u540c\u3058\u3067\u3082\u5f15\u6570\u304c\u5909\u308f\u308c\u3070\u9055\u3046\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044. \u4f8b\u5916\u306f \\(P(x)\\) \u3068 \\(P(x')\\) \u3067\u3059. \u3053\u308c\u306f\u540c\u3058\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3067\u3059\u304c \\(x\\) \u3068 \\(x'\\) \u3068\u3044\u3046\u7570\u306a\u308b\u5024\u306b\u5bfe\u3059\u308b\u78ba\u7387\u306e\u5024\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044. \u21a9","title":"\u306f\u3058\u3081\u306b"},{"location":"mcmc/#_1","text":"\u3053\u306e\u5b9f\u7fd2\u3067\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 (Markov-Chain Monte Carlo; MCMC ) \u3092\u3068\u308a\u3042\u3064\u304b\u3044\u307e\u3059. MCMC \u306f\u3042\u308b\u78ba\u7387\u5206\u5e03\u304b\u3089, \u78ba\u7387\u5909\u6570\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3059. \u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u3068\u8a00\u3044\u63db\u3048\u3066\u3082\u3044\u3044\u3067\u3057\u3087\u3046. \u78ba\u7387\u5909\u6570 \\(x\\) \u304c\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u3068\u3057\u307e\u3059 1 . \u3053\u306e\u3053\u3068\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u8a18\u3057\u307e\u3059. \\[ x \\sim P(x). \\] \\(x\\) \u306f\u96e2\u6563\u5024\u3067\u3082\u9023\u7d9a\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c, \u3053\u3053\u3067\u306f\u4fbf\u5b9c\u7684\u306b\u9023\u7d9a\u3057\u305f\u5024\u3092\u3068\u308b\u3068\u3057\u307e\u3057\u3087\u3046. \\(x\\) \u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3067\u304d\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\left\\langle A(x) \\right\\rangle_{x \\sim P(x)} = \\int\\mathrm{d}x\\,A(x)P(x). \\] \u3082\u3057 \\(x\\) \u304c\u591a\u6b21\u5143\u306e\u91cf\u3067\u3042\u308c\u3070\u53f3\u8fba\u306e\u7a4d\u5206\u306f\u591a\u6b21\u5143\u7a7a\u9593\u3067\u306e\u7a4d\u5206\u306b\u306a\u308a\u307e\u3059. \u591a\u6b21\u5143\u3067\u306e\u7a4d\u5206\u306f\u4e00\u822c\u306b\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u9ad8\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059. \u4e00\u65b9\u3067, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570\u306e\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u7528\u3044\u308b\u3068, \u53f3\u8fba\u306e\u7a4d\u5206\u3092\u4ee5\u4e0b\u306e\u548c\u306b\u3088\u3063\u3066\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\int\\mathrm{d}x\\,A(x)P(x) \\simeq \\frac{1}{n}\\sum_{i=1}^{n} A(x_i). \\] \u3053\u308c\u306b\u3088\u3063\u3066\u3042\u3089\u3086\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u307e\u3063\u305f\u304f\u540c\u3058\u624b\u7d9a\u304d\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \\(x\\) \u304c\u96e2\u6563\u7684\u3067\u3042\u3063\u3066\u3082\u9023\u7d9a\u3067\u3042\u3063\u3066\u3082\u540c\u3058\u624b\u7d9a\u304d\u3067\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u3082\u3061\u308d\u3093, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570\u306e\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u52b9\u7387\u3088\u304f\u751f\u6210\u3059\u308b (\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3059\u308b) \u624b\u6cd5\u304c\u3042\u308b\u3053\u3068\u304c\u524d\u63d0\u3067\u3059. \u30b5\u30f3\u30d7\u30eb\u3059\u308b\u305f\u3081\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u7a4d\u5206\u3092\u4e0a\u56de\u3063\u3066\u3057\u307e\u3063\u3066\u306f\u610f\u5473\u304c\u3042\u308a\u307e\u305b\u3093. \u305d\u3057\u3066 MCMC \u306f\u4f4e\u30b3\u30b9\u30c8\u3067\u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u5f37\u529b\u306a\u624b\u6cd5\u3067\u3059. \u7279\u306b\u9ad8\u6b21\u5143\u7a7a\u9593\u3092\u5bfe\u8c61\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u5834\u5408\u3084, \u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u5834\u5408\u306b\u6d3b\u8e8d\u3057\u307e\u3059. \u4ee5\u4e0b\u3067\u306f, \u4f55\u6545 MCMC \u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u304b\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u3066, Python \u3067 MCMC \u3092\u52d5\u304b\u3059\u30b3\u30fc\u30c9\u3092\u66f8\u304d, \u3055\u307e\u3056\u307e\u306a\u554f\u984c\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059.","title":"\u306f\u3058\u3081\u306b"},{"location":"mcmc/#_2","text":"\u4e71\u6570\u751f\u6210 \u2013 \u9006\u95a2\u6570\u6cd5\u3068\u68c4\u5374\u6cd5 \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u8a08\u7b97 \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0","title":"\u30b3\u30f3\u30c6\u30f3\u30c4"},{"location":"mcmc/#_3","text":"\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u5185\u5bb9\u306f Python 3.7.1 \u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u307e\u3059. \u4f7f\u7528\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059. \u3082\u3057\u30c6\u30ad\u30b9\u30c8\u306b\u8a18\u8f09\u3057\u3066\u3042\u308b\u30b3\u30fc\u30c9\u304c\u52d5\u304b\u306a\u3044\u5834\u5408\u306f, \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5dee\u304c\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044. astropy == 4.2 matplotlib == 3.3 . 4 numpy == 1.20 . 1 scipy == 1.3 . 0 \u3082\u3057, \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30b3\u30fc\u30c9\u304c\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u52d5\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f\u66f4\u65b0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u7ba1\u7406\u8005\u307e\u3067\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044. \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u69d8\u3005\u306a\u78ba\u7387\u5206\u5e03\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u306e\u3067, \u305d\u306e\u90fd\u5ea6\u65b0\u3057\u3044\u8a18\u53f7\u3092\u3042\u3066\u3066\u3044\u308b\u3068\u6587\u5b57\u304c\u67af\u6e07\u3057\u3066\u3057\u307e\u3044\u307e\u3059. \u305d\u3053\u3067\u78ba\u7387\u5909\u6570 \\(x\\) \u306e\u78ba\u7387\u5206\u5e03\u3092 \\(P(x)\\) \u3068\u8868\u8a18\u3057\u307e\u3059. \u78ba\u7387\u5909\u6570 \\(Y\\) \u306e\u78ba\u7387\u5206\u5e03\u306f \\(P(Y)\\) \u3067\u3059. \u6587\u5b57\u306f\u540c\u3058\u3067\u3082\u5f15\u6570\u304c\u5909\u308f\u308c\u3070\u9055\u3046\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044. \u4f8b\u5916\u306f \\(P(x)\\) \u3068 \\(P(x')\\) \u3067\u3059. \u3053\u308c\u306f\u540c\u3058\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3067\u3059\u304c \\(x\\) \u3068 \\(x'\\) \u3068\u3044\u3046\u7570\u306a\u308b\u5024\u306b\u5bfe\u3059\u308b\u78ba\u7387\u306e\u5024\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044. \u21a9","title":"\u52d5\u4f5c\u74b0\u5883"},{"location":"mcmc/generate_random_variables/","text":"\u4e71\u6570\u3092\u751f\u6210\u3059\u308b \u3053\u3053\u3067\u306f\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306b\u5f93\u3046\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u308b\u65b9\u6cd5\u3068\u3057\u3066, \u9006\u95a2\u6570\u6cd5\u3068\u68c4\u5374\u6cd5\u3068\u3044\u3046 2 \u3064\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059. MCMC \u306e\u7406\u89e3\u306b\u306f\u3055\u307b\u3069\u91cd\u8981\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c, MCMC \u3068\u5bfe\u6bd4\u3055\u305b\u308b\u624b\u6cd5\u3068\u3057\u3066\u3053\u3053\u3067\u7c21\u5358\u306b\u89e6\u308c\u3066\u304a\u304d\u307e\u3059. \u524d\u63d0/\u4e00\u69d8\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u95a2\u6570 \u524d\u63d0\u3068\u3057\u3066\u79c1\u305f\u3061\u306f \\([0,1)\\) \u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3059\u308b\u4e71\u6570\u3092\u751f\u6210\u3067\u304d\u308b\u3068\u3057\u307e\u3059. \u307e\u305a, \u4f55\u3089\u304b\u306e\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u308b\u80fd\u529b\u304c\u306a\u3044\u3068\u4ee5\u4e0b\u306e\u8b70\u8ad6\u306f\u6210\u7acb\u3057\u307e\u305b\u3093. 1 Python \u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u4e71\u6570\u751f\u6210\u5668\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. from numpy.random import default_rng # \u4e71\u6570\u751f\u6210\u5668 gen = default_rng ( 2021 ) # seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b u = gen . uniform ( 0 , 1 , size = ( 5 )) print ( u ) \u8a08\u7b97\u7d50\u679c [ 0.75694783 0.94138187 0.59246304 0.31884171 0.62607384 ] \u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u304c\u3069\u3093\u306a\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \\([0,1)\\) \u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng gen = default_rng ( 2021 ) fig = plt . figure () ax = fig . add_subplot () ax . plot ( gen . uniform ( 0 , 1 , size = ( 1000 )), ls = '' , marker = '.' ) ax . set_ylabel ( 'uniform random value' ) ax . set_xlabel ( 'sample number' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c numpy \u306b\u306f\u3055\u307e\u3056\u307e\u306a\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\u304c, \u3053\u3053\u3067\u306f\u4e00\u69d8\u4e71\u6570 uniform() \u3092\u4f7f\u3063\u3066\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059. \u4e71\u6570\u751f\u6210\u5668\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408 \u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f. \u4e71\u6570\u751f\u6210\u5668\u3092\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b Generator() \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u3060\u3055\u3044. from numpy.random import Generator , PCG64 gen = Generator ( PCG64 ( 2021 )) # PCG64 \u306b seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f PCG64 \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c, \u3082\u3057\u30e1\u30eb\u30bb\u30f3\u30cc\u30c4\u30a4\u30b9\u30bf\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u306f MT19937 \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044. from numpy.random import Generator , MT19937 gen = Generator ( MT19937 ( 2021 )) # MT19937 \u306b seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b \u9006\u95a2\u6570\u6cd5 \u9006\u95a2\u6570\u6cd5\u306b\u3088\u308b\u4e71\u6570\u751f\u6210 \u9006\u95a2\u6570\u6cd5\u3068\u306f\u4ee5\u4e0b\u306e\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3067\u3059. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x) = \\int P(x') \\mathrm{d}x'\\) \u306e\u9006\u95a2\u6570 \\(C^{-1}(y)\\) \u3092\u7528\u610f\u3059\u308b. 2 \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,1)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\({x'} \\gets C^{-1}(u)\\) \u306b\u3088\u3063\u3066 \\({x'}\\) \u3092\u5b9a\u7fa9\u3059\u308b. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x)\\) \u306f\u5358\u8abf\u5897\u52a0\u95a2\u6570\u306a\u306e\u3067\u5e38\u306b\u9006\u95a2\u6570\u3092\u6301\u3061\u307e\u3059. \\(C(x)\\) \u306e range \u306f \\([0,1)\\) \u306a\u306e\u3067, \u9006\u95a2\u6570 \\(C^{-1}(y)\\) \u306e domain \u306f \\([0,1)\\) \u306a\u306e\u3067 \\(u\\) \u3092\u5165\u529b\u3068\u3057\u3066\u4e0e\u3048\u308b\u3068, \\(C^{-1}(y)\\) \u306e domain \u5168\u4f53\u306b\u5bfe\u3057\u3066\u4e00\u69d8\u306e\u5bc6\u5ea6\u3067\u5165\u529b\u3092\u4e0e\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u3053\u3067 \\(u\\) \u3092 \\(\\mathrm{d}u\\) \u3060\u3051\u52d5\u304b\u3057\u305f\u3068\u304d\u306b \\({x'}\\) \u304c\u3069\u308c\u3060\u3051\u52d5\u304f\u304b\u3092\u8003\u3048\u308b\u3068, \\[ \\mathrm{d}{x'} = \\frac{\\mathrm{d}C^{-1}(u)}{\\mathrm{d}u} \\mathrm{d}u = \\frac{1}{P({x'})} \\mathrm{d}u. \\] \u3068\u306a\u308a\u307e\u3059. \\(u\\) \u21c9 \\({x'}\\) \u306e\u5909\u63db\u3067 \\(\\mathrm{d}u\\) \u306e\u5e45\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u305f\u30c7\u30fc\u30bf\u306f \\(\\mathrm{d}{x'} = P({x'})^{-1}\\mathrm{d}u\\) \u306e\u7bc4\u56f2\u306b\u5206\u5e03\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067, \\({x'}\\) \u306e\u7a7a\u9593\u3067\u306f\u5bc6\u5ea6\u306f \\(P({x'})\\) \u500d\u306b\u306a\u308a\u307e\u3059. \u3053\u308c\u306b\u3088\u3063\u3066, \u4e0a\u8a18\u306e\u5909\u63db\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u4e71\u6570 \\(x'\\) \u306e\u5206\u5e03\u306f\u306f\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3044\u307e\u3059. \u9006\u95a2\u6570\u6cd5\u306e\u6982\u5ff5\u56f3\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x)\\) \u3092\u9ed2\u5b9f\u7dda\u3067\u793a\u3057\u307e\u3057\u305f. \u3053\u3053\u3067 \\([0,1)\\) \u306e\u7bc4\u56f2\u3067\u4e00\u69d8\u306b\u5024\u3092\u30b5\u30f3\u30d7\u30eb\u3057\u3066, \u305d\u306e\u5024\u3092\u9ad8\u3055\u306b\u3082\u3061 \\(x\\) \u8ef8\u3068\u4e26\u884c\u306b\u306a\u7dda (\u9ec4\u8272) \u3092\u5f15\u304d\u307e\u3059. \u3053\u3053\u3067\u306f\u7dda\u3092 30 \u672c\u5f15\u3044\u3066\u3044\u307e\u3059. \u7dda\u304c \\(C(x)\\) \u3068\u3076\u3064\u304b\u3063\u305f\u3068\u3053\u308d\u3067 \\(x\\) \u8ef8\u306b\u843d\u3068\u3057\u307e\u3059. \u3053\u306e\u64cd\u4f5c\u306f \\(u\\) \u21c9 \\({x'}\\) \u306e\u5909\u63db\u306b\u76f8\u5f53\u3057\u3066\u3044\u307e\u3059. \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306e\u5024\u304c\u5927\u304d\u3044\u3068\u3053\u308d\u3067\u306f \\(C(x)\\) \u306e\u50be\u304d\u304c\u5927\u304d\u304f\u306a\u308b\u305f\u3081, \\(x\\) \u8ef8\u4e0a\u3067\u306f\u9ec4\u8272\u3044\u7dda\u306e\u5bc6\u5ea6\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570 \u9006\u95a2\u6570\u6cd5\u3092\u4f7f\u3063\u3066\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \u6307\u6570\u5206\u5e03\u3068\u306f \\(x \\geq 0\\) \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u78ba\u7387\u5206\u5e03\u3067, \u6e1b\u8870\u306e\u901f\u3055\u3092\u793a\u3059\u30d1\u30e9\u30e1\u30bf\u3092 1 \u3064\u6301\u3061\u307e\u3059. \\[ {\\operatorname{Exponential}}(\\lambda): P(x;\\lambda) = \\lambda\\exp(-{\\lambda}x). \\] \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u306f \\(C(x;\\lambda) = 1-\\exp(-{\\lambda}x)\\) \u3068\u306a\u308b\u306e\u3067, \u4e00\u69d8\u5206\u5e03\u304b\u3089\u751f\u6210\u3057\u305f\u4e71\u6570 \\(u\\) \u3092\u3064\u304b\u3063\u3066\u4ee5\u4e0b\u306e\u5909\u63db\u3092\u3059\u308b\u3053\u3068\u3067\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ x' \\gets -\\frac{1}{\\lambda}\\log(1-u). \\] \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e00\u69d8\u4e71\u6570 \\(u\\) \u3092 1000 \u500b\u751f\u6210\u3057\u3066, \\(\\lambda = 3\\) \u306e\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u78ba\u7387\u5206\u5e03 \\(P(x;\\lambda)\\) \u3092\u540c\u3058\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) lam = 3.0 X = np . linspace ( 0 , 5 , 100 ) Y = lam * np . exp ( - lam * X ) u = gen . uniform ( 0 , 1 , size = ( 10000 )) x = - 1.0 / lam * np . log ( 1.0 - u ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c \u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570 \u2014 Box-Muller \u5909\u63db \u3082\u3046\u3072\u3068\u3064, \u9006\u95a2\u6570\u6cd5\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u5e73\u5747\u304c 0 \u3067\u5206\u6563\u304c 1 \u306e\u6a19\u6e96\u6b63\u898f\u5206\u5e03 \\(\\mathcal{N}(0,1)\\) \u3092\u5c0e\u51fa\u3057\u307e\u3059. \u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306f\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u967d\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081, \u9006\u95a2\u6570\u6cd5\u3092\u5358\u7d14\u306b\u5f53\u3066\u306f\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093. \u3057\u304b\u3057, Box-Muller \u5909\u63db\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u3067\u4e00\u69d8\u5206\u5e03\u306b\u5f93\u3046 2 \u3064\u306e\u4e71\u6570\u304b\u3089 2 \u3064\u306e\u72ec\u7acb\u3057\u305f\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u304b\u3089\u306a\u308b\u78ba\u7387\u5909\u6570 \\(x\\) , \\(y\\) \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305a\u306f, \\(x\\) , \\(y\\) \u306e\u540c\u6642\u78ba\u7387\u5206\u5e03 \\(P(x,y)\\) \u3092\u8003\u3048\u307e\u3059. \\[ P(x,y) = \\frac{1}{2\\pi}\\exp\\left(-\\frac{x^2+y^2}{2}\\right). \\] \u3053\u3053\u3067, \\(x = r\\cos\\theta\\) , \\(y = r\\sin\\theta\\) \u3068\u304a\u3044\u3066\u6975\u5ea7\u6a19\u7cfb\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u8003\u3048\u307e\u3059. \u305f\u3060\u3057, \u78ba\u7387\u306f \\(\\theta\\) \u306b\u306f\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081 \\([0,2\\pi)\\) \u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059. \u554f\u984c\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b \\(\\theta\\) \u306f\u7a4d\u5206\u3057\u3066\u6d88\u3057\u3066\u3057\u307e\u3063\u3066, \\(r\\) \u306b\u5bfe\u3059\u308b\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u8003\u3048\u307e\u3059. \\[ C(r) = \\frac{1}{2\\pi}\\int_0^{2\\pi}\\mathrm{d}\\theta' \\int_0^r\\mathrm{d}r' r\\exp\\left(-\\frac{r^2}{2}\\right) = 1 - \\exp\\left(-\\frac{r^2}{2}\\right). \\] \u3053\u308c\u3067\u5148\u307b\u3069\u3068\u540c\u69d8\u306b\u9006\u95a2\u6570\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570 \\(u\\) , \\(v\\) \u3092\u4f7f\u3063\u3066 \\(r\\) , \\(\\theta\\) \u306b\u5909\u63db\u3057\u307e\u3059. \u3055\u3089\u306b \\(r\\) , \\(\\theta\\) \u3092\u76f4\u884c\u5ea7\u6a19\u3067\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067, \u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) , \\(y\\) \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\left\\{~\\begin{aligned} r &= \\sqrt{-2\\log(1-u)} \\\\ \\theta &= 2\\pi v \\end{aligned}\\right. \\quad\\Rightarrow\\quad \\left\\{~\\begin{aligned} x &= r\\cos\\theta \\\\ y &= r\\sin\\theta \\end{aligned}\\right.. \\] \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e00\u69d8\u5206\u5e03\u304b\u3089 Box-Muller \u5909\u63db\u306b\u3088\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3057\u305f \\(x\\) \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u540c\u3058\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) X = np . linspace ( - 5 , 5 , 500 ) Y = np . exp ( - X * X / 2.0 ) / np . sqrt ( 2 * np . pi ) u = gen . uniform ( 0 , 1 , size = ( 30000 )) v = gen . uniform ( 0 , 1 , size = ( 30000 )) r = np . sqrt ( - 2 * np . log ( 1 - u )) t = 2 * np . pi * v x = r * np . cos ( t ) y = r * np . sin ( t ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c \u9006\u95a2\u6570\u6cd5\u306f\u7279\u5b9a\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u6975\u3081\u3066\u5f37\u529b\u3067\u3059. \u3057\u304b\u3057\u306a\u304c\u3089, \u9006\u95a2\u6570\u6cd5\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u306e\u9006\u95a2\u6570\u3092\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u9650\u3089\u308c\u305f\u30af\u30e9\u30b9\u306e\u78ba\u7387\u5206\u5e03\u306b\u3057\u304b\u9069\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093. \u68c4\u5374\u6cd5 \u68c4\u5374\u6cd5\u306b\u3088\u308b\u4e71\u6570\u751f\u6210 \u68c4\u5374\u6cd5\u306f\u6975\u3081\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3067\u3059. \u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e00\u69d8\u5206\u5e03\u304b\u3089\u5019\u88dc \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\([0,\\alpha)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,\\alpha)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 3 \\(u \\leq P(x)\\) \u3067\u3042\u308c\u3070 \\(x\\) \u3092\u63a1\u7528\u3059\u308b. \u305d\u3046\u3067\u306a\u3051\u308c\u3070 \\(x\\) \u3092\u68c4\u5374\u3059\u308b. \u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u63c3\u3046\u307e\u3067\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3059. \\(P(x)\\) \u306e\u5024\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u308b\u78ba\u7387\u304c\u9ad8\u304f\u306a\u308b\u305f\u3081, \u5fc5\u7136\u7684\u306b \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\(P(x)\\) \u306e\u5024\u3092\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081, \u307b\u307c\u4efb\u610f\u306e\u5f62\u72b6\u306e\u78ba\u7387\u5206\u5e03\u306b\u5bfe\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \u3053\u306e\u624b\u7d9a\u304d\u3067\u306f\u78ba\u7387\u5909\u6570 \\(x\\) , \\(x'\\) \u304c\u63a1\u7528\u3055\u308c\u308b\u78ba\u7387\u306e\u6bd4 \\(P(x)/P(x')\\) \u306b\u3088\u3063\u3066 \\(x\\) \u304c\u5f93\u3046\u78ba\u7387\u5206\u5e03\u306e\u5f62\u72b6\u304c\u6c7a\u307e\u308a\u307e\u3059. \u305d\u306e\u305f\u3081, \u78ba\u7387\u5206\u5e03\u95a2\u6570\u306e\u5f62\u72b6\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u304c\u898f\u683c\u5316\u5b9a\u6570\u304c\u308f\u304b\u3089\u306a\u3044 4 \u3068\u3044\u3046\u30b1\u30fc\u30b9\u3067\u3082\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u78ba\u7387\u5206\u5e03 \\(P(x) \\propto \\sqrt{1-x^2}\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u68c4\u5374\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u78ba\u7387\u5206\u5e03\u3068\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. \u307e\u305f\u5408\u8a08\u3067 30000 \u4ef6\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5408\u8a08\u3067\u4f55\u56de\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3057\u305f\u306e\u304b\u3092\u8868\u793a\u3057\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x : np . sqrt ( np . clip ( 1 - x * x , 0 , 1 )) / np . pi * 2.0 X = np . linspace ( - 1.2 , 1.2 , 500 ) Y = func ( X ) trial = 0 x = [] while len ( x ) < 30000 : u = gen . uniform ( - 2 , 2 ) v = gen . uniform ( 0 , 2.0 / np . pi ) if v < func ( u ): x . append ( u ) trial += 1 x = np . array ( x ) print ( f 'total trial: { trial } ' ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c total trial : 76247 \u63d0\u6848\u5206\u5e03\u306b\u3088\u308b\u52b9\u7387\u5316 \u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3067\u306f \\(x\\) \u3092\u4e00\u69d8\u306a\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u3066\u3044\u307e\u3057\u305f. \u3053\u3053\u3067, \u6700\u521d\u306b \\(x\\) \u3092\u62bd\u51fa\u3059\u308b\u5206\u5e03\u306e\u3053\u3068\u3092\u63d0\u6848\u5206\u5e03\u3068\u547c\u3073\u307e\u3059. \u63d0\u6848\u5206\u5e03\u306f\u4e00\u69d8\u5206\u5e03\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093. \u63d0\u6848\u5206\u5e03\u3068\u3057\u3066 \\(P(x)\\) \u306b\u8fd1\u3044\u5206\u5e03\u3092\u7528\u3044\u308b\u3053\u3068\u3067, \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u52b9\u7387\u5316\u3059\u308b (\u68c4\u5374\u7387\u3092\u4e0b\u3052\u308b) \u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u63d0\u6848\u5206\u5e03\u3068\u3057\u3066 \\(Q(x)\\) \u3092\u3082\u3061\u3044\u305f\u5834\u5408\u306e\u624b\u7d9a\u304d\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059. 5 \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u5019\u88dc \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 6 \\([0,\\alpha)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,\\alpha)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 7 \\(u \\leq P(x)/Q(x)\\) \u3067\u3042\u308c\u3070 \\(x\\) \u3092\u63a1\u7528\u3059\u308b. \u305d\u3046\u3067\u306a\u3051\u308c\u3070 \\(x\\) \u3092\u68c4\u5374\u3059\u308b. \u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u63c3\u3046\u307e\u3067\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3068\u3057\u3066\u63a1\u7528\u3057\u305f\u78ba\u7387\u5206\u5e03 \\(P(x) \\propto \\sqrt{1-x^2}\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u68c4\u5374\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u6c42\u3081\u308b\u78ba\u7387\u5206\u5e03\u3068\u76f8\u9055\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. \u307e\u305f\u5408\u8a08\u3067 30000 \u4ef6\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5408\u8a08\u3067\u4f55\u56de\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3057\u305f\u306e\u304b\u3092\u8868\u793a\u3057\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x : np . sqrt ( np . clip ( 1 - x * x , 0 , 1 )) / np . pi * 2.0 prop = lambda x : np . exp ( - x * x / 2.0 ) / np . sqrt ( 2.0 * np . pi ) X = np . linspace ( - 1.2 , 1.2 , 500 ) Y = func ( X ) trial = 0 x = [] while len ( x ) < 30000 : u = gen . normal ( 0 , 1 ) v = gen . uniform ( 0 , np . sqrt ( 8 / np . pi )) if v < func ( u ) / prop ( u ): x . append ( u ) trial += 1 x = np . array ( x ) print ( f 'total trial: { trial } ' ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c total trial : 47650 \u76ee\u7684\u3068\u3059\u308b\u5206\u5e03\u306b\u8fd1\u3044\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u52b9\u7387\u7684\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \u68c4\u5374\u6cd5\u306e\u5f31\u70b9 \u68c4\u5374\u6cd5\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308a\u5e45\u5e83\u3044\u30af\u30e9\u30b9\u306e\u554f\u984c\u306b\u5bfe\u3057\u3066\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e00\u65b9\u3067, \u78ba\u7387\u5206\u5e03\u304c\u5c40\u6240\u7684\u306b\u9ad8\u3044\u5024\u3092\u6301\u3064\u5834\u5408\u306b\u306f, \u68c4\u5374\u7387\u304c\u9ad8\u304f\u306a\u3063\u3066\u3057\u307e\u3044, \u52b9\u7387\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f \\(x \\in [0,10)\\) \u3067\u5b9a\u7fa9\u3055\u308c\u305f \\(\\lambda = 3\\) \u306e\u6307\u6570\u5206\u5e03\u306b\u5bfe\u3057\u3066 \\(\\alpha = \\lambda\\) \u3068\u3057\u3066\u68c4\u5374\u6cd5\u3092\u8a66\u3057\u3066\u307f\u307e\u3059. 10000 \u56de\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306b\u68c4\u5374\u3055\u308c\u305f\u5272\u5408\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059. from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) lam = 3.0 ub = 10.0 func = lambda x : lam * np . exp ( - lam * x ) / ( 1.0 - np . exp ( - lam * ub )) x = gen . uniform ( 0 , ub , size = ( 10000 )) a = gen . uniform ( 0 , lam , size = ( 10000 )) rejected = a > func ( x ) print ( 'rejected fraction: {} ' . format ( rejected . sum () / rejected . size )) \u8a08\u7b97\u7d50\u679c rejected fraction : 0.9693 \u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u304a\u3088\u305d 96% \u306e\u8a66\u884c\u304c reject \u3055\u308c\u307e\u3057\u305f. \u671b\u3093\u3060\u6570\u3060\u3051\u4e71\u6570\u3092\u5f97\u308b\u305f\u3081\u306b\u304a\u3088\u305d 30 \u500d\u4ee5\u4e0a\u306e\u8a66\u884c\u3092\u8cbb\u3084\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u68c4\u5374\u6cd5\u306f\u5b9f\u88c5\u3057\u3084\u3059\u304f, \u9069\u7528\u7bc4\u56f2\u306e\u5e83\u3044\u65b9\u6cd5\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c, \u554f\u984c\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u3057\u3082\u52b9\u7387\u306e\u826f\u3044\u65b9\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093. \u3082\u3061\u308d\u3093\u8a08\u7b97\u6a5f\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u4e71\u6570\u306f\u64ec\u4f3c\u4e71\u6570\u3067\u3057\u304b\u306a\u3044\u306e\u3067\u3059\u304c, \u3053\u3053\u3067\u306f\u8003\u3048\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046. \u21a9 \u4e00\u822c\u306b\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092 \\(C(x)\\) , \u78ba\u7387\u5206\u5e03\u3092 \\(P(x)\\) \u3067\u8868\u3059\u3053\u3068\u306b\u3057\u307e\u3059. \u21a9 \u305f\u3060\u3057 \\(\\alpha \\geq \\max\\limits_x P(x)\\) \u3068\u3057\u307e\u3059. \u21a9 \u78ba\u7387\u3092 Bayes \u7684\u306b\u8a55\u4fa1\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3053\u306e\u30b1\u30fc\u30b9\u306b\u306f\u983b\u7e41\u306b\u906d\u9047\u3057\u307e\u3059. \u7279\u306b\u591a\u6b21\u5143\u306e\u91cf\u3092\u6271\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f, \u898f\u683c\u5316\u3059\u308b\u305f\u3081\u306b\u591a\u6b21\u5143\u7a7a\u9593\u3067\u306e\u7a4d\u5206\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u300c2 \u70b9\u306e\u78ba\u7387\u306e\u6bd4\u300d\u3055\u3048\u5206\u304b\u308c\u3070\u9069\u7528\u3067\u304d\u308b\u624b\u6cd5\u306f\u3068\u3066\u3082\u6709\u7528\u3067\u3059 (\u305d\u3057\u3066\u4eca\u56de MCMC \u3067\u7528\u3044\u308b Metropolis-Hasting \u6cd5\u3082\u3053\u306e\u30b1\u30fc\u30b9\u306b\u8a72\u5f53\u3057\u307e\u3059). \u21a9 \u3053\u3053\u3067\u306f\u4f8b\u5916\u7684\u306b\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306b \\(Q(x)\\) \u3068\u3044\u3046\u8868\u73fe\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059. \u5b9f\u614b\u3092\u53cd\u6620\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u304c \\(P(x)\\) \u3092\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u306b\u4f7f\u3044\u3084\u3059\u3044\u95a2\u6570\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059. \u21a9 \u3053\u3053\u3067 \\(P(x) > 0\\) \u3067\u3042\u308b\u3088\u3046\u306a \\(x\\) \u306b\u3064\u3044\u3066\u306f\u5fc5\u305a \\(Q(x) > 0\\) \u3067\u3042\u308b\u3088\u3046\u306a \\(Q(x)\\) \u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u63d0\u6848\u3055\u308c\u308b\u3053\u3068\u306e\u306a\u3044\u9818\u57df\u306f\u6c7a\u3057\u3066\u30b5\u30f3\u30d7\u30eb\u306b\u73fe\u308c\u307e\u305b\u3093. \u21a9 \u305f\u3060\u3057 \\(\\alpha \\geq \\max\\limits_x {P(x)}/{Q(x)}\\) \u3068\u3057\u307e\u3059. \u21a9","title":"\u4e71\u6570\u3092\u751f\u6210\u3059\u308b"},{"location":"mcmc/generate_random_variables/#_1","text":"\u3053\u3053\u3067\u306f\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306b\u5f93\u3046\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u308b\u65b9\u6cd5\u3068\u3057\u3066, \u9006\u95a2\u6570\u6cd5\u3068\u68c4\u5374\u6cd5\u3068\u3044\u3046 2 \u3064\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059. MCMC \u306e\u7406\u89e3\u306b\u306f\u3055\u307b\u3069\u91cd\u8981\u3067\u306f\u306a\u3044\u306e\u3067\u3059\u304c, MCMC \u3068\u5bfe\u6bd4\u3055\u305b\u308b\u624b\u6cd5\u3068\u3057\u3066\u3053\u3053\u3067\u7c21\u5358\u306b\u89e6\u308c\u3066\u304a\u304d\u307e\u3059.","title":"\u4e71\u6570\u3092\u751f\u6210\u3059\u308b"},{"location":"mcmc/generate_random_variables/#_2","text":"\u524d\u63d0\u3068\u3057\u3066\u79c1\u305f\u3061\u306f \\([0,1)\\) \u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3059\u308b\u4e71\u6570\u3092\u751f\u6210\u3067\u304d\u308b\u3068\u3057\u307e\u3059. \u307e\u305a, \u4f55\u3089\u304b\u306e\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u308b\u80fd\u529b\u304c\u306a\u3044\u3068\u4ee5\u4e0b\u306e\u8b70\u8ad6\u306f\u6210\u7acb\u3057\u307e\u305b\u3093. 1 Python \u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u4e71\u6570\u751f\u6210\u5668\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. from numpy.random import default_rng # \u4e71\u6570\u751f\u6210\u5668 gen = default_rng ( 2021 ) # seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b u = gen . uniform ( 0 , 1 , size = ( 5 )) print ( u ) \u8a08\u7b97\u7d50\u679c [ 0.75694783 0.94138187 0.59246304 0.31884171 0.62607384 ] \u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3066\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u304c\u3069\u3093\u306a\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \\([0,1)\\) \u306e\u7bc4\u56f2\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng gen = default_rng ( 2021 ) fig = plt . figure () ax = fig . add_subplot () ax . plot ( gen . uniform ( 0 , 1 , size = ( 1000 )), ls = '' , marker = '.' ) ax . set_ylabel ( 'uniform random value' ) ax . set_xlabel ( 'sample number' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c numpy \u306b\u306f\u3055\u307e\u3056\u307e\u306a\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u304c\u5099\u308f\u3063\u3066\u3044\u307e\u3059\u304c, \u3053\u3053\u3067\u306f\u4e00\u69d8\u4e71\u6570 uniform() \u3092\u4f7f\u3063\u3066\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059. \u4e71\u6570\u751f\u6210\u5668\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408 \u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e71\u6570\u751f\u6210\u5668\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f. \u4e71\u6570\u751f\u6210\u5668\u3092\u81ea\u5206\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b Generator() \u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u3060\u3055\u3044. from numpy.random import Generator , PCG64 gen = Generator ( PCG64 ( 2021 )) # PCG64 \u306b seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f PCG64 \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c, \u3082\u3057\u30e1\u30eb\u30bb\u30f3\u30cc\u30c4\u30a4\u30b9\u30bf\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u306f MT19937 \u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044. from numpy.random import Generator , MT19937 gen = Generator ( MT19937 ( 2021 )) # MT19937 \u306b seed \u5024\u3092\u4e0e\u3048\u3066\u521d\u671f\u5316\u3059\u308b","title":"\u524d\u63d0/\u4e00\u69d8\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u95a2\u6570"},{"location":"mcmc/generate_random_variables/#_3","text":"","title":"\u9006\u95a2\u6570\u6cd5"},{"location":"mcmc/generate_random_variables/#_4","text":"\u9006\u95a2\u6570\u6cd5\u3068\u306f\u4ee5\u4e0b\u306e\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3067\u3059. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x) = \\int P(x') \\mathrm{d}x'\\) \u306e\u9006\u95a2\u6570 \\(C^{-1}(y)\\) \u3092\u7528\u610f\u3059\u308b. 2 \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,1)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\({x'} \\gets C^{-1}(u)\\) \u306b\u3088\u3063\u3066 \\({x'}\\) \u3092\u5b9a\u7fa9\u3059\u308b. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x)\\) \u306f\u5358\u8abf\u5897\u52a0\u95a2\u6570\u306a\u306e\u3067\u5e38\u306b\u9006\u95a2\u6570\u3092\u6301\u3061\u307e\u3059. \\(C(x)\\) \u306e range \u306f \\([0,1)\\) \u306a\u306e\u3067, \u9006\u95a2\u6570 \\(C^{-1}(y)\\) \u306e domain \u306f \\([0,1)\\) \u306a\u306e\u3067 \\(u\\) \u3092\u5165\u529b\u3068\u3057\u3066\u4e0e\u3048\u308b\u3068, \\(C^{-1}(y)\\) \u306e domain \u5168\u4f53\u306b\u5bfe\u3057\u3066\u4e00\u69d8\u306e\u5bc6\u5ea6\u3067\u5165\u529b\u3092\u4e0e\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u3053\u3067 \\(u\\) \u3092 \\(\\mathrm{d}u\\) \u3060\u3051\u52d5\u304b\u3057\u305f\u3068\u304d\u306b \\({x'}\\) \u304c\u3069\u308c\u3060\u3051\u52d5\u304f\u304b\u3092\u8003\u3048\u308b\u3068, \\[ \\mathrm{d}{x'} = \\frac{\\mathrm{d}C^{-1}(u)}{\\mathrm{d}u} \\mathrm{d}u = \\frac{1}{P({x'})} \\mathrm{d}u. \\] \u3068\u306a\u308a\u307e\u3059. \\(u\\) \u21c9 \\({x'}\\) \u306e\u5909\u63db\u3067 \\(\\mathrm{d}u\\) \u306e\u5e45\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u305f\u30c7\u30fc\u30bf\u306f \\(\\mathrm{d}{x'} = P({x'})^{-1}\\mathrm{d}u\\) \u306e\u7bc4\u56f2\u306b\u5206\u5e03\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067, \\({x'}\\) \u306e\u7a7a\u9593\u3067\u306f\u5bc6\u5ea6\u306f \\(P({x'})\\) \u500d\u306b\u306a\u308a\u307e\u3059. \u3053\u308c\u306b\u3088\u3063\u3066, \u4e0a\u8a18\u306e\u5909\u63db\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u4e71\u6570 \\(x'\\) \u306e\u5206\u5e03\u306f\u306f\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3044\u307e\u3059. \u9006\u95a2\u6570\u6cd5\u306e\u6982\u5ff5\u56f3\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059. \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03 \\(C(x)\\) \u3092\u9ed2\u5b9f\u7dda\u3067\u793a\u3057\u307e\u3057\u305f. \u3053\u3053\u3067 \\([0,1)\\) \u306e\u7bc4\u56f2\u3067\u4e00\u69d8\u306b\u5024\u3092\u30b5\u30f3\u30d7\u30eb\u3057\u3066, \u305d\u306e\u5024\u3092\u9ad8\u3055\u306b\u3082\u3061 \\(x\\) \u8ef8\u3068\u4e26\u884c\u306b\u306a\u7dda (\u9ec4\u8272) \u3092\u5f15\u304d\u307e\u3059. \u3053\u3053\u3067\u306f\u7dda\u3092 30 \u672c\u5f15\u3044\u3066\u3044\u307e\u3059. \u7dda\u304c \\(C(x)\\) \u3068\u3076\u3064\u304b\u3063\u305f\u3068\u3053\u308d\u3067 \\(x\\) \u8ef8\u306b\u843d\u3068\u3057\u307e\u3059. \u3053\u306e\u64cd\u4f5c\u306f \\(u\\) \u21c9 \\({x'}\\) \u306e\u5909\u63db\u306b\u76f8\u5f53\u3057\u3066\u3044\u307e\u3059. \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306e\u5024\u304c\u5927\u304d\u3044\u3068\u3053\u308d\u3067\u306f \\(C(x)\\) \u306e\u50be\u304d\u304c\u5927\u304d\u304f\u306a\u308b\u305f\u3081, \\(x\\) \u8ef8\u4e0a\u3067\u306f\u9ec4\u8272\u3044\u7dda\u306e\u5bc6\u5ea6\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059.","title":"\u9006\u95a2\u6570\u6cd5\u306b\u3088\u308b\u4e71\u6570\u751f\u6210"},{"location":"mcmc/generate_random_variables/#_5","text":"\u9006\u95a2\u6570\u6cd5\u3092\u4f7f\u3063\u3066\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046. \u6307\u6570\u5206\u5e03\u3068\u306f \\(x \\geq 0\\) \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u78ba\u7387\u5206\u5e03\u3067, \u6e1b\u8870\u306e\u901f\u3055\u3092\u793a\u3059\u30d1\u30e9\u30e1\u30bf\u3092 1 \u3064\u6301\u3061\u307e\u3059. \\[ {\\operatorname{Exponential}}(\\lambda): P(x;\\lambda) = \\lambda\\exp(-{\\lambda}x). \\] \u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u306f \\(C(x;\\lambda) = 1-\\exp(-{\\lambda}x)\\) \u3068\u306a\u308b\u306e\u3067, \u4e00\u69d8\u5206\u5e03\u304b\u3089\u751f\u6210\u3057\u305f\u4e71\u6570 \\(u\\) \u3092\u3064\u304b\u3063\u3066\u4ee5\u4e0b\u306e\u5909\u63db\u3092\u3059\u308b\u3053\u3068\u3067\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ x' \\gets -\\frac{1}{\\lambda}\\log(1-u). \\] \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e00\u69d8\u4e71\u6570 \\(u\\) \u3092 1000 \u500b\u751f\u6210\u3057\u3066, \\(\\lambda = 3\\) \u306e\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u78ba\u7387\u5206\u5e03 \\(P(x;\\lambda)\\) \u3092\u540c\u3058\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) lam = 3.0 X = np . linspace ( 0 , 5 , 100 ) Y = lam * np . exp ( - lam * X ) u = gen . uniform ( 0 , 1 , size = ( 10000 )) x = - 1.0 / lam * np . log ( 1.0 - u ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c","title":"\u6307\u6570\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570"},{"location":"mcmc/generate_random_variables/#-box-muller","text":"\u3082\u3046\u3072\u3068\u3064, \u9006\u95a2\u6570\u6cd5\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u5e73\u5747\u304c 0 \u3067\u5206\u6563\u304c 1 \u306e\u6a19\u6e96\u6b63\u898f\u5206\u5e03 \\(\\mathcal{N}(0,1)\\) \u3092\u5c0e\u51fa\u3057\u307e\u3059. \u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306f\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u967d\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081, \u9006\u95a2\u6570\u6cd5\u3092\u5358\u7d14\u306b\u5f53\u3066\u306f\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093. \u3057\u304b\u3057, Box-Muller \u5909\u63db\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u3067\u4e00\u69d8\u5206\u5e03\u306b\u5f93\u3046 2 \u3064\u306e\u4e71\u6570\u304b\u3089 2 \u3064\u306e\u72ec\u7acb\u3057\u305f\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u304b\u3089\u306a\u308b\u78ba\u7387\u5909\u6570 \\(x\\) , \\(y\\) \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305a\u306f, \\(x\\) , \\(y\\) \u306e\u540c\u6642\u78ba\u7387\u5206\u5e03 \\(P(x,y)\\) \u3092\u8003\u3048\u307e\u3059. \\[ P(x,y) = \\frac{1}{2\\pi}\\exp\\left(-\\frac{x^2+y^2}{2}\\right). \\] \u3053\u3053\u3067, \\(x = r\\cos\\theta\\) , \\(y = r\\sin\\theta\\) \u3068\u304a\u3044\u3066\u6975\u5ea7\u6a19\u7cfb\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u8003\u3048\u307e\u3059. \u305f\u3060\u3057, \u78ba\u7387\u306f \\(\\theta\\) \u306b\u306f\u4f9d\u5b58\u3057\u306a\u3044\u305f\u3081 \\([0,2\\pi)\\) \u306b\u4e00\u69d8\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3088\u3055\u305d\u3046\u3067\u3059. \u554f\u984c\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b \\(\\theta\\) \u306f\u7a4d\u5206\u3057\u3066\u6d88\u3057\u3066\u3057\u307e\u3063\u3066, \\(r\\) \u306b\u5bfe\u3059\u308b\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092\u8003\u3048\u307e\u3059. \\[ C(r) = \\frac{1}{2\\pi}\\int_0^{2\\pi}\\mathrm{d}\\theta' \\int_0^r\\mathrm{d}r' r\\exp\\left(-\\frac{r^2}{2}\\right) = 1 - \\exp\\left(-\\frac{r^2}{2}\\right). \\] \u3053\u308c\u3067\u5148\u307b\u3069\u3068\u540c\u69d8\u306b\u9006\u95a2\u6570\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570 \\(u\\) , \\(v\\) \u3092\u4f7f\u3063\u3066 \\(r\\) , \\(\\theta\\) \u306b\u5909\u63db\u3057\u307e\u3059. \u3055\u3089\u306b \\(r\\) , \\(\\theta\\) \u3092\u76f4\u884c\u5ea7\u6a19\u3067\u306e\u5024\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067, \u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) , \\(y\\) \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\left\\{~\\begin{aligned} r &= \\sqrt{-2\\log(1-u)} \\\\ \\theta &= 2\\pi v \\end{aligned}\\right. \\quad\\Rightarrow\\quad \\left\\{~\\begin{aligned} x &= r\\cos\\theta \\\\ y &= r\\sin\\theta \\end{aligned}\\right.. \\] \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4e00\u69d8\u5206\u5e03\u304b\u3089 Box-Muller \u5909\u63db\u306b\u3088\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3057\u305f \\(x\\) \u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092\u540c\u3058\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) X = np . linspace ( - 5 , 5 , 500 ) Y = np . exp ( - X * X / 2.0 ) / np . sqrt ( 2 * np . pi ) u = gen . uniform ( 0 , 1 , size = ( 30000 )) v = gen . uniform ( 0 , 1 , size = ( 30000 )) r = np . sqrt ( - 2 * np . log ( 1 - u )) t = 2 * np . pi * v x = r * np . cos ( t ) y = r * np . sin ( t ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c \u9006\u95a2\u6570\u6cd5\u306f\u7279\u5b9a\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u6975\u3081\u3066\u5f37\u529b\u3067\u3059. \u3057\u304b\u3057\u306a\u304c\u3089, \u9006\u95a2\u6570\u6cd5\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u306e\u9006\u95a2\u6570\u3092\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u6761\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u9650\u3089\u308c\u305f\u30af\u30e9\u30b9\u306e\u78ba\u7387\u5206\u5e03\u306b\u3057\u304b\u9069\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093.","title":"\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3046\u4e71\u6570 --- Box-Muller \u5909\u63db"},{"location":"mcmc/generate_random_variables/#_6","text":"","title":"\u68c4\u5374\u6cd5"},{"location":"mcmc/generate_random_variables/#_7","text":"\u68c4\u5374\u6cd5\u306f\u6975\u3081\u3066\u30b7\u30f3\u30d7\u30eb\u306a\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3067\u3059. \u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u624b\u7d9a\u304d\u306b\u3088\u3063\u3066\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e00\u69d8\u5206\u5e03\u304b\u3089\u5019\u88dc \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\([0,\\alpha)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,\\alpha)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 3 \\(u \\leq P(x)\\) \u3067\u3042\u308c\u3070 \\(x\\) \u3092\u63a1\u7528\u3059\u308b. \u305d\u3046\u3067\u306a\u3051\u308c\u3070 \\(x\\) \u3092\u68c4\u5374\u3059\u308b. \u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u63c3\u3046\u307e\u3067\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3059. \\(P(x)\\) \u306e\u5024\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u308b\u78ba\u7387\u304c\u9ad8\u304f\u306a\u308b\u305f\u3081, \u5fc5\u7136\u7684\u306b \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\(P(x)\\) \u306e\u5024\u3092\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081, \u307b\u307c\u4efb\u610f\u306e\u5f62\u72b6\u306e\u78ba\u7387\u5206\u5e03\u306b\u5bfe\u3057\u3066\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \u3053\u306e\u624b\u7d9a\u304d\u3067\u306f\u78ba\u7387\u5909\u6570 \\(x\\) , \\(x'\\) \u304c\u63a1\u7528\u3055\u308c\u308b\u78ba\u7387\u306e\u6bd4 \\(P(x)/P(x')\\) \u306b\u3088\u3063\u3066 \\(x\\) \u304c\u5f93\u3046\u78ba\u7387\u5206\u5e03\u306e\u5f62\u72b6\u304c\u6c7a\u307e\u308a\u307e\u3059. \u305d\u306e\u305f\u3081, \u78ba\u7387\u5206\u5e03\u95a2\u6570\u306e\u5f62\u72b6\u306f\u308f\u304b\u3063\u3066\u3044\u308b\u304c\u898f\u683c\u5316\u5b9a\u6570\u304c\u308f\u304b\u3089\u306a\u3044 4 \u3068\u3044\u3046\u30b1\u30fc\u30b9\u3067\u3082\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u78ba\u7387\u5206\u5e03 \\(P(x) \\propto \\sqrt{1-x^2}\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u68c4\u5374\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u78ba\u7387\u5206\u5e03\u3068\u76f8\u9055\u304c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. \u307e\u305f\u5408\u8a08\u3067 30000 \u4ef6\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5408\u8a08\u3067\u4f55\u56de\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3057\u305f\u306e\u304b\u3092\u8868\u793a\u3057\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x : np . sqrt ( np . clip ( 1 - x * x , 0 , 1 )) / np . pi * 2.0 X = np . linspace ( - 1.2 , 1.2 , 500 ) Y = func ( X ) trial = 0 x = [] while len ( x ) < 30000 : u = gen . uniform ( - 2 , 2 ) v = gen . uniform ( 0 , 2.0 / np . pi ) if v < func ( u ): x . append ( u ) trial += 1 x = np . array ( x ) print ( f 'total trial: { trial } ' ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c total trial : 76247","title":"\u68c4\u5374\u6cd5\u306b\u3088\u308b\u4e71\u6570\u751f\u6210"},{"location":"mcmc/generate_random_variables/#_8","text":"\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3067\u306f \\(x\\) \u3092\u4e00\u69d8\u306a\u5206\u5e03\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u3066\u3044\u307e\u3057\u305f. \u3053\u3053\u3067, \u6700\u521d\u306b \\(x\\) \u3092\u62bd\u51fa\u3059\u308b\u5206\u5e03\u306e\u3053\u3068\u3092\u63d0\u6848\u5206\u5e03\u3068\u547c\u3073\u307e\u3059. \u63d0\u6848\u5206\u5e03\u306f\u4e00\u69d8\u5206\u5e03\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093. \u63d0\u6848\u5206\u5e03\u3068\u3057\u3066 \\(P(x)\\) \u306b\u8fd1\u3044\u5206\u5e03\u3092\u7528\u3044\u308b\u3053\u3068\u3067, \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092\u52b9\u7387\u5316\u3059\u308b (\u68c4\u5374\u7387\u3092\u4e0b\u3052\u308b) \u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u63d0\u6848\u5206\u5e03\u3068\u3057\u3066 \\(Q(x)\\) \u3092\u3082\u3061\u3044\u305f\u5834\u5408\u306e\u624b\u7d9a\u304d\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059. 5 \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u5019\u88dc \\(x\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 6 \\([0,\\alpha)\\) \u306e\u4e00\u69d8\u5206\u5e03 \\({\\operatorname{Unif}}(0,\\alpha)\\) \u304b\u3089 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. 7 \\(u \\leq P(x)/Q(x)\\) \u3067\u3042\u308c\u3070 \\(x\\) \u3092\u63a1\u7528\u3059\u308b. \u305d\u3046\u3067\u306a\u3051\u308c\u3070 \\(x\\) \u3092\u68c4\u5374\u3059\u308b. \u5fc5\u8981\u306a\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u63c3\u3046\u307e\u3067\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u6a19\u6e96\u6b63\u898f\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3068\u3057\u3066\u63a1\u7528\u3057\u305f\u78ba\u7387\u5206\u5e03 \\(P(x) \\propto \\sqrt{1-x^2}\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u68c4\u5374\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u3066\u3044\u307e\u3059. \u751f\u6210\u3057\u305f\u4e71\u6570\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u6c42\u3081\u308b\u78ba\u7387\u5206\u5e03\u3068\u76f8\u9055\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059. \u307e\u305f\u5408\u8a08\u3067 30000 \u4ef6\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5408\u8a08\u3067\u4f55\u56de\u4e0a\u8a18\u306e\u624b\u7d9a\u304d\u3092\u7e70\u308a\u8fd4\u3057\u305f\u306e\u304b\u3092\u8868\u793a\u3057\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x : np . sqrt ( np . clip ( 1 - x * x , 0 , 1 )) / np . pi * 2.0 prop = lambda x : np . exp ( - x * x / 2.0 ) / np . sqrt ( 2.0 * np . pi ) X = np . linspace ( - 1.2 , 1.2 , 500 ) Y = func ( X ) trial = 0 x = [] while len ( x ) < 30000 : u = gen . normal ( 0 , 1 ) v = gen . uniform ( 0 , np . sqrt ( 8 / np . pi )) if v < func ( u ) / prop ( u ): x . append ( u ) trial += 1 x = np . array ( x ) print ( f 'total trial: { trial } ' ) fig = plt . figure () ax = fig . add_subplot () ax . hist ( x , bins = 50 , density = True ) ax . plot ( X , Y ) ax . set_ylabel ( 'frequency' ) ax . set_xlabel ( 'variable: x' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c total trial : 47650 \u76ee\u7684\u3068\u3059\u308b\u5206\u5e03\u306b\u8fd1\u3044\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u52b9\u7387\u7684\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059.","title":"\u63d0\u6848\u5206\u5e03\u306b\u3088\u308b\u52b9\u7387\u5316"},{"location":"mcmc/generate_random_variables/#_9","text":"\u68c4\u5374\u6cd5\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308a\u5e45\u5e83\u3044\u30af\u30e9\u30b9\u306e\u554f\u984c\u306b\u5bfe\u3057\u3066\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e00\u65b9\u3067, \u78ba\u7387\u5206\u5e03\u304c\u5c40\u6240\u7684\u306b\u9ad8\u3044\u5024\u3092\u6301\u3064\u5834\u5408\u306b\u306f, \u68c4\u5374\u7387\u304c\u9ad8\u304f\u306a\u3063\u3066\u3057\u307e\u3044, \u52b9\u7387\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059. \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f \\(x \\in [0,10)\\) \u3067\u5b9a\u7fa9\u3055\u308c\u305f \\(\\lambda = 3\\) \u306e\u6307\u6570\u5206\u5e03\u306b\u5bfe\u3057\u3066 \\(\\alpha = \\lambda\\) \u3068\u3057\u3066\u68c4\u5374\u6cd5\u3092\u8a66\u3057\u3066\u307f\u307e\u3059. 10000 \u56de\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306b\u68c4\u5374\u3055\u308c\u305f\u5272\u5408\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059. from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) lam = 3.0 ub = 10.0 func = lambda x : lam * np . exp ( - lam * x ) / ( 1.0 - np . exp ( - lam * ub )) x = gen . uniform ( 0 , ub , size = ( 10000 )) a = gen . uniform ( 0 , lam , size = ( 10000 )) rejected = a > func ( x ) print ( 'rejected fraction: {} ' . format ( rejected . sum () / rejected . size )) \u8a08\u7b97\u7d50\u679c rejected fraction : 0.9693 \u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u304a\u3088\u305d 96% \u306e\u8a66\u884c\u304c reject \u3055\u308c\u307e\u3057\u305f. \u671b\u3093\u3060\u6570\u3060\u3051\u4e71\u6570\u3092\u5f97\u308b\u305f\u3081\u306b\u304a\u3088\u305d 30 \u500d\u4ee5\u4e0a\u306e\u8a66\u884c\u3092\u8cbb\u3084\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u68c4\u5374\u6cd5\u306f\u5b9f\u88c5\u3057\u3084\u3059\u304f, \u9069\u7528\u7bc4\u56f2\u306e\u5e83\u3044\u65b9\u6cd5\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c, \u554f\u984c\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u3057\u3082\u52b9\u7387\u306e\u826f\u3044\u65b9\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093. \u3082\u3061\u308d\u3093\u8a08\u7b97\u6a5f\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u4e71\u6570\u306f\u64ec\u4f3c\u4e71\u6570\u3067\u3057\u304b\u306a\u3044\u306e\u3067\u3059\u304c, \u3053\u3053\u3067\u306f\u8003\u3048\u306a\u3044\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046. \u21a9 \u4e00\u822c\u306b\u7d2f\u7a4d\u78ba\u7387\u5206\u5e03\u3092 \\(C(x)\\) , \u78ba\u7387\u5206\u5e03\u3092 \\(P(x)\\) \u3067\u8868\u3059\u3053\u3068\u306b\u3057\u307e\u3059. \u21a9 \u305f\u3060\u3057 \\(\\alpha \\geq \\max\\limits_x P(x)\\) \u3068\u3057\u307e\u3059. \u21a9 \u78ba\u7387\u3092 Bayes \u7684\u306b\u8a55\u4fa1\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3053\u306e\u30b1\u30fc\u30b9\u306b\u306f\u983b\u7e41\u306b\u906d\u9047\u3057\u307e\u3059. \u7279\u306b\u591a\u6b21\u5143\u306e\u91cf\u3092\u6271\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f, \u898f\u683c\u5316\u3059\u308b\u305f\u3081\u306b\u591a\u6b21\u5143\u7a7a\u9593\u3067\u306e\u7a4d\u5206\u304c\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081\u300c2 \u70b9\u306e\u78ba\u7387\u306e\u6bd4\u300d\u3055\u3048\u5206\u304b\u308c\u3070\u9069\u7528\u3067\u304d\u308b\u624b\u6cd5\u306f\u3068\u3066\u3082\u6709\u7528\u3067\u3059 (\u305d\u3057\u3066\u4eca\u56de MCMC \u3067\u7528\u3044\u308b Metropolis-Hasting \u6cd5\u3082\u3053\u306e\u30b1\u30fc\u30b9\u306b\u8a72\u5f53\u3057\u307e\u3059). \u21a9 \u3053\u3053\u3067\u306f\u4f8b\u5916\u7684\u306b\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306b \\(Q(x)\\) \u3068\u3044\u3046\u8868\u73fe\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059. \u5b9f\u614b\u3092\u53cd\u6620\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u304c \\(P(x)\\) \u3092\u8fd1\u4f3c\u3059\u308b\u305f\u3081\u306b\u4f7f\u3044\u3084\u3059\u3044\u95a2\u6570\u3068\u3057\u3066\u63a1\u7528\u3057\u3066\u3044\u307e\u3059. \u21a9 \u3053\u3053\u3067 \\(P(x) > 0\\) \u3067\u3042\u308b\u3088\u3046\u306a \\(x\\) \u306b\u3064\u3044\u3066\u306f\u5fc5\u305a \\(Q(x) > 0\\) \u3067\u3042\u308b\u3088\u3046\u306a \\(Q(x)\\) \u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u63d0\u6848\u3055\u308c\u308b\u3053\u3068\u306e\u306a\u3044\u9818\u57df\u306f\u6c7a\u3057\u3066\u30b5\u30f3\u30d7\u30eb\u306b\u73fe\u308c\u307e\u305b\u3093. \u21a9 \u305f\u3060\u3057 \\(\\alpha \\geq \\max\\limits_x {P(x)}/{Q(x)}\\) \u3068\u3057\u307e\u3059. \u21a9","title":"\u68c4\u5374\u6cd5\u306e\u5f31\u70b9"},{"location":"mcmc/markov_chain/","text":"\u52d5\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 \u524d\u9805 \u3067\u306f\u554f\u984c\u306e\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308b\u3068, \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u5206\u5e03\u306b\u30d2\u30c3\u30c8\u3059\u308b\u78ba\u7387\u304c\u8457\u3057\u304f\u4e0b\u304c\u308b\u305f\u3081, \u52b9\u7387\u3088\u304f\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u306b\u3064\u3044\u3066\u89e6\u308c\u307e\u3057\u305f. \u3053\u308c\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u78ba\u7387\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3067\u3046\u307e\u304f\u8fd1\u4f3c\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059. \u305d\u3053\u3067, \u78ba\u7387\u5206\u5e03\u5168\u4f53\u3092\u3046\u307e\u304f\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3092\u3042\u304d\u3089\u3081\u3066, \u3042\u308b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d\u3067\u306e\u307f\u3046\u307e\u304f\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059. \u3054\u304f\u8fd1\u508d\u3067\u3057\u304b\u3064\u3058\u3064\u307e\u304c\u5408\u3063\u3066\u3044\u306a\u304f\u3066\u3082, \u305d\u306e\u60c5\u5831\u3092\u9069\u5207\u306b\u3064\u306a\u304e\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070, \u78ba\u7387\u5206\u5e03\u5168\u4f53\u3092\u3046\u307e\u304f\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3067\u3059. \u3053\u3053\u3067\u306f\u300c\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059. \u30c7\u30fc\u30bf\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b, \u3042\u308b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d\u3067\u306e\u307f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u63a2\u3059\u3068\u3044\u3046\u6226\u7565\u3092\u3068\u308a\u307e\u3059. \u4e00\u56de\u306e\u64cd\u4f5c\u3067\u306f\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306e\u3054\u304f\u4e00\u90e8\u3057\u304b\u63a2\u7d22\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u304c, \u3053\u306e\u64cd\u4f5c\u3092\u591a\u6570\u56de\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u78ba\u7387\u5206\u5e03\u95a2\u6570\u5168\u4f53\u306e\u5f62\u72b6\u3092\u3092\u6d6e\u304b\u3073\u4e0a\u304c\u3089\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u30de\u30eb\u30b3\u30d5\u9023\u9396\u3068\u306f \u30de\u30eb\u30b3\u30d5\u9023\u9396\u3068\u306f\u30de\u30eb\u30b3\u30d5\u904e\u7a0b\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u72b6\u614b (\u30c7\u30fc\u30bf) \u306e\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u3092\u8868\u3057\u307e\u3059. 1 \u30de\u30eb\u30b3\u30d5\u904e\u7a0b\u3068\u306f \u201c\u73fe\u5728\u306e\u72b6\u614b \\(x\\) \u304b\u3089\u6b21\u306e\u72b6\u614b \\(x'\\) \u3078\u9077\u79fb\u3059\u308b\u78ba\u7387 \\(\\pi(x \\to x')\\) \u304c\u73fe\u5728\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u201d \u3068\u3044\u3046\u904e\u7a0b\u3092\u8868\u3057\u3066\u3044\u307e\u3059. 2 \u3042\u308b\u6761\u4ef6\u306e\u3082\u3068\u3067\u306f\u5341\u5206\u306b\u9577\u3044\u6642\u9593\u9077\u79fb\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306e \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u306e\u5206\u5e03\u304c (\u521d\u671f\u5024 \\(x_0\\) \u306b\u4f9d\u3089\u305a) \u3042\u308b\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059. 3 \u3053\u306e\u5206\u5e03\u306e\u3053\u3068\u3092\u5b9a\u5e38\u5206\u5e03\u3068\u547c\u3073\u307e\u3059. \u3042\u308b\u6642\u523b \\(t\\) \u307e\u3067\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306b\u671f\u5f85\u3055\u308c\u308b \\(x\\) \u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092 \\(\\mathcal{P}_t(x)\\) \u3068\u3057\u307e\u3059. \u3053\u3053\u304b\u3089\u6642\u523b \\(t+1\\) \u306b\u304a\u3051\u308b\u5206\u5e03 \\(\\mathcal{P}_{t+1}(x)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059. 4 \\[ \\mathcal{P}_{t+1}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}_{t}(x)\\pi(x \\to x'). \\] \\(t \\to \\infty\\) \u306e\u3068\u304d\u306b \\(\\mathcal{P}_{t}(x)\\) \u304c\u5b9a\u5e38\u5206\u5e03\u306b\u53ce\u675f\u3059\u308b\u306e\u3067\u3042\u308c\u3070 \\(\\mathcal{P}(x)\\) \u306f, \\[ \\mathcal{P}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}(x)\\pi(x \\to x'). \\] \u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, \u3053\u3046\u3057\u305f\u5b9a\u5e38\u5206\u5e03\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u306b\u306f, \u72b6\u614b\u9077\u79fb\u306e\u30eb\u30fc\u30eb\u306b\u3082\u5236\u7d04\u304c\u3042\u308a\u307e\u3059. \u307e\u305a, \u5b58\u5728\u3059\u308b\u3069\u306e\u72b6\u614b\u30da\u30a2 \\((x, x')\\) \u3082\u6709\u9650\u56de\u306e\u64cd\u4f5c\u3067\u9077\u79fb\u3067\u304d\u308b (\u72b6\u614b\u304c\u5206\u65ad\u3055\u308c\u3066\u3044\u306a\u3044) \u3053\u3068\u304c\u5fc5\u8981\u3067\u3059. \u52a0\u3048\u3066, \u72b6\u614b\u306e\u9077\u79fb\u306b\u306f\u975e\u5468\u671f\u6027\u3082\u5fc5\u8981\u3068\u3055\u308c\u307e\u3059\u304c, \u3053\u3053\u3067\u306f\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3057\u307e\u3059. 5 \u5341\u5206\u306b\u9577\u3044\u6642\u9593\u30de\u30eb\u30b3\u30d5\u9023\u9396\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u3092\u5b9a\u5e38\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u4e71\u6570\u3068\u307f\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u3053\u3053\u3067\u72b6\u614b\u9077\u79fb\u306e\u30eb\u30fc\u30eb\u3092\u3046\u307e\u304f\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u53ce\u675f\u5148\u306e\u5b9a\u5e38\u5206\u5e03\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3088\u3046\u306a\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u8a2d\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070, \u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u304b\u3089\u306e\u4e71\u6570\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059. \u5206\u5e03\u306e\u53ce\u675f\u6027\u306b\u3064\u3044\u3066\u306e\u30b3\u30e1\u30f3\u30c8 \u3053\u3053\u3067\u306f\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u671f\u5f85\u3055\u308c\u308b\u5206\u5e03\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u3063\u3066\u3044\u304f\u304b\u3092\u8003\u3048\u308b\u3053\u3068\u3067, \u5206\u5e03\u306e\u53ce\u675f\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059. \\(t=0\\) \u306e\u3068\u304d\u306b\u671f\u5f85\u3055\u308c\u308b \\(x\\) \u306e\u5206\u5e03\u3092 \\(\\mathcal{P}_0{x}\\) \u3068\u3057\u307e\u3059. \u3053\u308c\u306f\u521d\u671f\u72b6\u614b\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u4efb\u610f\u306e\u5206\u5e03\u3067\u3059. 1 \u30b9\u30c6\u30c3\u30d7\u5f8c\u306e\u5206\u5e03\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\mathcal{P}_1(x) = \\int\\mathrm{d}x'\\,\\mathcal{P}_0(x')\\pi(x' \\to x) = c\\mathcal{P}(x) + (1-c)R_0(x). \\] \u305f\u3060\u3057 \\(0 < c < 1\\) \u3067 \\(\\mathcal{P}_0(x)\\) \u306b\u4f9d\u3089\u306a\u3044\u5b9a\u6570\u306b\u306a\u308a\u307e\u3059 (\u3053\u306e\u5f62\u3067\u66f8\u3051\u308b\u3053\u3068\u306e\u8a3c\u660e\u306f\u7701\u7565\u3057\u307e\u3059). \\(\\pi(x \\to x')\\) \u306e\u64cd\u4f5c\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066 \\(\\mathcal{P}_1(x)\\) \u304b\u3089 \\(c\\) \u500d\u3060\u3051 \\(\\mathcal{P}(x)\\) \u3092\u524a\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u540c\u3058\u72b6\u614b\u9077\u79fb\u3092\u5b9f\u884c\u3059\u308b\u3068, \\[ \\begin{aligned} \\mathcal{P}_2(x) &= c\\mathcal{P}(x) + (1-c)(c\\mathcal{P}(x) + (1-c)R_1(x)) \\\\ &= \\left(1 - (1-c)^2\\right) \\mathcal{P}(x) + (1-c)^2 R_1(x) \\end{aligned} \\] \u3068\u5909\u63db\u3067\u304d\u307e\u3059. \u305f\u3060\u3057 \\(R_0(x)\\) \u3092\u521d\u671f\u5206\u5e03\u3068\u3057\u3066 \\(c\\mathcal{P}(x)\\) \u3092\u524a\u308a\u3060\u3059\u64cd\u4f5c\u3092\u518d\u3073\u304a\u3053\u3063\u3066\u3044\u307e\u3059. \u72b6\u614b\u9077\u79fb\u3092 \\(m\\) \u56de\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u5f0f\u3092\u5f97\u307e\u3059. \\[ \\mathcal{P}_m(x) = \\left(1 - (1-c)^m\\right) \\mathcal{P}(x) + (1-c)^m R_{m-1}(x). \\] \\(m \\to \\infty\\) \u306e\u6975\u9650\u3067\u4efb\u610f\u306e\u5206\u5e03 \\(\\mathcal{P}_0(x)\\) \u304b\u3089 \\(\\mathcal{P}(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3053\u3068\u304c\u793a\u305b\u307e\u3057\u305f. \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30eb\u751f\u6210 \u3053\u3053\u307e\u3067, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u5b9a\u5e38\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f. \u6b21\u306b\u5b9a\u5e38\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u3092\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059. \u5b9a\u5e38\u5206\u5e03\u304c\u6e80\u305f\u3059\u3079\u304d\u5f0f\u306f \\[ \\mathcal{P}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}(x)\\pi(x \\to x') \\] \u3067\u3059. \u3053\u306e\u5f0f\u304c \\(\\mathcal{P}(x) \\gets P(x)\\) \u3067\u6210\u7acb\u3059\u308b\u9077\u79fb\u78ba\u7387 \\(\\pi(x \\to x')\\) \u3092\u8a2d\u8a08\u3059\u308b\u305f\u3081\u306b\u306f, \u3042\u3089\u3086\u308b\u9077\u79fb\u306b\u3064\u3044\u3066\u77db\u76fe\u304c\u7121\u3044\u3088\u3046\u306b\u3064\u3058\u3064\u307e\u3092\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u3053\u308c\u3092\u6e80\u305f\u3059\u9077\u79fb\u3092\u8003\u3048\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u306e\u3067, \u4e0a\u8a18\u306e\u3064\u308a\u3042\u3044\u3092\u6e80\u305f\u3059\u305f\u3081\u306e\u5341\u5206\u6761\u4ef6\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u8003\u3048\u307e\u3059. \\[ \\mathcal{P}(x')\\pi(x' \\to x) = \\mathcal{P}(x)\\pi(x \\to x'). \\] \u3053\u308c\u3092\u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3068\u547c\u3073\u307e\u3059. \u4e21\u8fba\u3092 \\(x\\) \u306b\u3064\u3044\u3066\u7a4d\u5206\u3059\u308c\u3070\u5143\u306e\u5f0f\u306b\u623b\u308b\u305f\u3081, \u5341\u5206\u6761\u4ef6\u3068\u3057\u3066\u6210\u7acb\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u81ea\u660e\u3067\u3059. \u4efb\u610f\u306e \\((x, x')\\) \u306b\u3064\u3044\u3066 \\[ {P}(x')\\pi(x' \\to x) = {P}(x)\\pi(x \\to x') \\] \u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u72b6\u614b\u9077\u79fb\u3092\u8a2d\u8a08\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u304b\u3089 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u305d\u306e\u305f\u3081\u306e\u624b\u6cd5\u306e\u3072\u3068\u3064\u304c Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059. Metropolis-Hastings algorithm Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u751f\u6210\u3057\u307e\u3059. \u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u304b\u3089\u6b21\u306e\u72b6\u614b\u306e\u5019\u88dc \\(x_p\\) \u3092\u78ba\u7387\u5206\u5e03 \\(Q(x_p; x_t)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b. 6 \\(P(x)\\) , \\(Q(x_p; x)\\) \u304b\u3089\u4ee5\u4e0b\u306e\u91cf\u3092\u8a08\u7b97\u3059\u308b. 7 \\[ \\alpha = \\frac{P(x_p)}{P(x_t)}\\frac{Q(x_t;x_p)}{Q(x_p; x_t)} \\] \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03\u304b\u3089\u4e71\u6570 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b. \\(u \\leq \\alpha\\) \u3067\u3042\u308c\u3070\u63d0\u6848\u3055\u308c\u305f\u72b6\u614b \\(x_p\\) \u3092 \\(x_{t+1}\\) \u3068\u3057\u3066\u63a1\u7528\u3059\u308b. \\(u > \\alpha\\) \u3067\u3042\u308c\u3070\u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u3092 \\(x_{t+1}\\) \u3068\u3057\u3066\u63a1\u7528\u3059\u308b. \u3053\u306e\u3088\u3046\u306b\u72b6\u614b\u9077\u79fb\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059. \u305f\u3060\u3057, \u6b21\u306e\u72b6\u614b\u3092\u63d0\u6848\u3059\u308b\u78ba\u7387\u5206\u5e03 \\(Q(x_p; x)\\) \u306e\u9078\u629e\u306b\u3088\u3063\u3066\u306f\u51fa\u529b\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u306e\u5206\u5e03\u304c \\(P(x)\\) \u3078\u3068\u53ce\u675f\u3059\u308b\u307e\u3067\u306b\u6570\u591a\u304f\u306e\u72b6\u614b\u9077\u79fb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059. \u72b6\u614b \\(x\\) \u306e\u8fd1\u508d\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306b\u306f, \u63d0\u6848\u5206\u5e03 \\(Q(x_p; x)\\) \u306f \\(x\\) \u3092\u4e2d\u5fc3\u3068\u3057\u305f\u591a\u6b21\u5143\u6b63\u898f\u5206\u5e03\u306e\u3088\u3046\u306a\u5206\u5e03\u304c\u591a\u304f\u63a1\u7528\u3055\u308c\u307e\u3059. \u3053\u306e\u63d0\u6848\u5206\u5e03\u306e\u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u5e83\u3059\u304e\u308b\u3068\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u76f4\u9762\u3057\u305f\u554f\u984c\u304c\u518d\u71c3\u3057\u3066\u53ce\u675f\u304c\u9045\u304f\u306a\u308a\u307e\u3059. \u4e00\u65b9\u3067, \u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u72ed\u3059\u304e\u3066\u3082\u78ba\u7387\u5206\u5e03\u3092\u8986\u3044\u5c3d\u304f\u3059\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u306b\u53ce\u675f\u304c\u9045\u304f\u306a\u308a\u307e\u3059. \u63d0\u6848\u5206\u5e03\u306e\u9078\u629e\u306f\u3042\u308b\u7a0b\u5ea6\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u306e\u78ba\u8a8d \u307e\u305a\u306f \\(\\alpha \\leq 1\\) \u306e\u30b1\u30fc\u30b9\u3092\u8003\u3048\u307e\u3059. \\(x_t \\to x_p\\) \u3078\u3068\u9077\u79fb\u3059\u308b\u78ba\u7387 \\(\\pi(x_t \\to x_p)\\) \u306f \\(Q(x_p; x_t)\\) \u304b\u3089 \\(x_p\\) \u304c\u9078\u3070\u308c, \u304b\u3064\u78ba\u7387 \\(\\alpha\\) \u3067\u63a1\u629e\u3055\u308c\u308b\u3068\u3044\u3046\u6761\u4ef6\u306b\u306a\u308a\u307e\u3059. \u4e00\u65b9, \\(x_p \\to x_t\\) \u3078\u3068\u9077\u79fb\u3059\u308b\u904e\u7a0b\u3067\u306f \\(\\alpha\\) \u306b\u76f8\u5f53\u3059\u308b\u91cf\u304c\u304b\u306a\u3089\u305a 1 \u3092\u8d85\u3048\u308b (\u9006\u6570\u306b\u306a\u308b) \u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\left\\{~\\begin{aligned} \\pi(x_t \\to x_p) &= \\alpha Q(x_p; x_t) \\\\ \\pi(x_p \\to x_t) &= Q(x_t; x_p) \\end{aligned}\\right., \\] \u3088\u3063\u3066 \\(P(x_t)\\pi(x_t \\to x_p)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068, \\[ P(x_t)\\pi(x_t \\to x_p) = P(x_t) \\frac{P(x_p)}{P(x_t)}\\frac{Q(x_t; x_p)}{Q(x_p; x_t)}Q(x_p; x_t) = P(x_p)Q(x_t; x_p) \\] \u3068\u306a\u308a\u307e\u3059. \u540c\u69d8\u306b \\(P(x_p)\\pi(x_p \\to x_t)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068, \\[ P(x_p)\\pi(x_p \\to x_t) = P(x_p)Q(x_t; x_p) \\] \u3068\u306a\u308b\u305f\u3081, \u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \\(\\alpha > 1\\) \u306e\u5834\u5408\u3082\u540c\u69d8\u306b\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059. Gibbs sampling Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7279\u6b8a\u306a\u4f8b\u306b Gibbs \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3046\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059. \u591a\u6b21\u5143\u306e\u78ba\u7387\u5bc6\u5ea6\u5206\u5e03 \\(P(x)\\) \u5168\u4f53\u3092\u4e00\u5ea6\u306b\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u3044\u3068\u3057\u3066\u3082, \u3042\u308b 1 \u6b21\u5143\u3060\u3051, \u3042\u308b\u3044\u306f\u3042\u308b\u90e8\u5206\u7a7a\u9593\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u305f\u6761\u4ef6\u4ed8\u304d\u5206\u5e03\u3060\u3051\u306f\u53b3\u5bc6\u306b\u6c42\u3081\u3089\u308c\u308b\u3068\u3044\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059. Gibbls \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u751f\u6210\u3057\u307e\u3059. \u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u304b\u3089\u66f4\u65b0\u3059\u308b\u6b21\u5143 \\(i\\) \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3059\u308b. 8 \u6b21\u306e\u72b6\u614b \\(x_p\\) \u3092 \\(P(x_t^{(i)}|x_t^{({\\neg}\\,i)})\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\(x^i\\) , \\(x^{\\neg i}\\) \u306f\u305d\u308c\u305e\u308c \\(x\\) \u306e \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u306e\u307f\u306e\u6210\u5206\u3068 \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u3092\u3092\u9664\u3044\u305f\u6210\u5206\u3092\u8868\u3057\u3066\u3044\u307e\u3059. \u6b21\u306e\u72b6\u614b \\(x_p\\) \u3092\u9078\u629e\u3059\u308b\u63d0\u6848\u5206\u5e03 \\(Q(x_p; x)\\) \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ Q(x_p; x_t) = P(i)P(x_p^{i}|x_t^{{\\neg}i}), \\quad Q(x_t; x_p) = P(i)P(x_t^{i}|x_t^{{\\neg}i}) \\] \u3053\u3053\u3067 \\(P(i)\\) \u306f \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u304c\u9078\u3070\u308c\u308b\u78ba\u7387\u3067\u3059. \\(\\alpha\\) \u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\alpha = \\frac{P(x_p)}{P(x_t)} \\frac{P(i)P(x_t^{i}|x_t^{{\\neg}i})}{P(i)P(x_p^{i}|x_t^{{\\neg}i})} \\] \u5206\u6bcd\u5206\u5b50\u306b \\(P(x_t^{\\neg{i}})\\) \u3092\u304b\u3051\u308b\u3068 \\(\\alpha = 1\\) \u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059. Gibbs \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u63d0\u6848\u5206\u5e03\u306b\u53b3\u5bc6\u306a\u6761\u4ef6\u4ed8\u304d\u78ba\u7387\u5206\u5e03\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u5fc5\u305a\u63a1\u629e\u3055\u308c\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u305f Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u3068\u89e3\u91c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306e\u521d\u671f\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u3064\u3044\u3066\u306f\u521d\u671f\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u6642\u671f\u304c\u3042\u308a\u307e\u3059. \u8a08\u7b97\u7d50\u679c\u304c\u521d\u671f\u72b6\u614b\u306b\u4f9d\u3089\u306a\u3044\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u521d\u671f\u306e\u3044\u304f\u3089\u304b\u306e\u5272\u5408\u3092\u6368\u3066\u53bb\u308b\u3068\u3044\u3046\u4f5c\u696d\u3092\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059. \u3053\u306e\u904e\u7a0b\u3092 burn-in \u3068\u547c\u3073\u307e\u3059. \u6642\u7cfb\u5217\u3063\u307d\u3055\u3092\u610f\u8b58\u3057\u3066\u306a\u3093\u3068\u306a\u304f index \u3092 \\(t\\) \u306b\u3057\u3066\u3044\u307e\u3059\u304c, \u3042\u307e\u308a\u6df1\u3044\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093. \u21a9 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u5834\u5408 (\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb) \u306a\u3069\u3067\u306f \\(x_t\\) \u304b\u3089 \\(x_{t+1}\\) \u3078\u306e\u9077\u79fb\u78ba\u7387\u3092\u5b9a\u3081\u308b \u201c\u73fe\u5728\u306e\u72b6\u614b\u201d \u3068\u3057\u3066 \\(\\tilde{x}_t = (x_{t-2},x_{t-1},x_{t})^T\\) \u306e\u3088\u3046\u306b\u904e\u53bb\u306e\u60c5\u5831\u3092\u542b\u3081\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059. \u21a9 \u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u3068\u306e\u6df7\u540c\u3092\u907f\u3051\u308b\u305f\u3081\u306b, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5217\u306b\u671f\u5f85\u3055\u308c\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092 \\(\\mathcal{P}(x)\\) \u3068\u30d5\u30a9\u30f3\u30c8\u3092\u5c11\u3057\u5909\u3048\u3066\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059. \u21a9 \u9023\u7d9a\u5206\u5e03\u3068\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u304c \\(x\\) \u304c\u96e2\u6563\u7684\u306a\u5834\u5408\u306f\u548c\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044. \u21a9 \u30c1\u30a7\u30c3\u30ab\u30fc\u30dc\u30fc\u30c9\u306e\u4e0a\u3092 1 \u30de\u30b9\u305a\u3064\u79fb\u52d5\u3059\u308b\u30b3\u30de\u3092\u8003\u3048\u3066\u307f\u307e\u3059. \u30b3\u30de\u306e\u5206\u5e03\u306f\u3053\u306e\u5834\u5408 \\(t\\) \u304c\u5947\u6570\u306e\u3068\u304d\u3068\u5076\u6570\u306e\u3068\u304d\u3067\u305d\u308c\u305e\u308c\u5b9a\u5e38\u5206\u5e03\u306b\u53ce\u675f\u3057\u307e\u3059\u304c, \u5168\u4f53\u3067\u898b\u305f\u3068\u304d\u306f \\(\\mathcal{P}_\\mathrm{odd}(x)\\) , \\(\\mathcal{P}_\\mathrm{even}(x)\\) \u3067\u632f\u52d5\u3057\u3066\u3057\u307e\u3044\u53ce\u675f\u3057\u307e\u305b\u3093. \u975e\u5468\u671f\u6027\u306f\u3053\u3046\u3057\u305f\u30b1\u30fc\u30b9\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u306b\u8981\u6c42\u3055\u308c\u307e\u3059. \u21a9 \\(x\\) \u306e\u8fd1\u508d\u3092\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u3044\u306e\u3067 \\(x\\) \u3092\u30d1\u30e9\u30e1\u30bf\u3068\u3057\u3066\u6301\u3061\u307e\u3059. \u78ba\u7387\u5206\u5e03\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u7269\u7406\u7684\u306b\u610f\u5473\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u3044 (\u3042\u308b\u3068\u306f\u9650\u3089\u306a\u3044) \u306e\u3067\u6587\u5b57\u306b \\(Q\\) \u3092\u4f7f\u3044\u307e\u3057\u305f. \u21a9 \\(\\alpha\\) \u306e\u8a08\u7b97\u3067\u306f\u6bd4\u3092\u3068\u308b\u306e\u3067 \\(P(x)\\) \u306e\u898f\u683c\u5316\u5b9a\u6570\u306f\u672a\u77e5\u306e\u307e\u307e\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093. \u21a9 \u5fc5\u305a\u3057\u3082\u30e9\u30f3\u30c0\u30e0\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u304f\u9806\u756a\u306b\u9078\u3093\u3067\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093. \u21a9","title":"\u52d5\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5"},{"location":"mcmc/markov_chain/#_1","text":"\u524d\u9805 \u3067\u306f\u554f\u984c\u306e\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308b\u3068, \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u5206\u5e03\u306b\u30d2\u30c3\u30c8\u3059\u308b\u78ba\u7387\u304c\u8457\u3057\u304f\u4e0b\u304c\u308b\u305f\u3081, \u52b9\u7387\u3088\u304f\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u306b\u3064\u3044\u3066\u89e6\u308c\u307e\u3057\u305f. \u3053\u308c\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u78ba\u7387\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03\u3067\u3046\u307e\u304f\u8fd1\u4f3c\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059. \u305d\u3053\u3067, \u78ba\u7387\u5206\u5e03\u5168\u4f53\u3092\u3046\u307e\u304f\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3092\u3042\u304d\u3089\u3081\u3066, \u3042\u308b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d\u3067\u306e\u307f\u3046\u307e\u304f\u8fd1\u4f3c\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059. \u3054\u304f\u8fd1\u508d\u3067\u3057\u304b\u3064\u3058\u3064\u307e\u304c\u5408\u3063\u3066\u3044\u306a\u304f\u3066\u3082, \u305d\u306e\u60c5\u5831\u3092\u9069\u5207\u306b\u3064\u306a\u304e\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070, \u78ba\u7387\u5206\u5e03\u5168\u4f53\u3092\u3046\u307e\u304f\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3067\u3059. \u3053\u3053\u3067\u306f\u300c\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u300d\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059. \u30c7\u30fc\u30bf\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b, \u3042\u308b\u30c7\u30fc\u30bf\u306e\u8fd1\u508d\u3067\u306e\u307f\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u63a2\u3059\u3068\u3044\u3046\u6226\u7565\u3092\u3068\u308a\u307e\u3059. \u4e00\u56de\u306e\u64cd\u4f5c\u3067\u306f\u78ba\u7387\u5206\u5e03\u95a2\u6570\u306e\u3054\u304f\u4e00\u90e8\u3057\u304b\u63a2\u7d22\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u304c, \u3053\u306e\u64cd\u4f5c\u3092\u591a\u6570\u56de\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u78ba\u7387\u5206\u5e03\u95a2\u6570\u5168\u4f53\u306e\u5f62\u72b6\u3092\u3092\u6d6e\u304b\u3073\u4e0a\u304c\u3089\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.","title":"\u52d5\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5"},{"location":"mcmc/markov_chain/#_2","text":"\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3068\u306f\u30de\u30eb\u30b3\u30d5\u904e\u7a0b\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u72b6\u614b (\u30c7\u30fc\u30bf) \u306e\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u3092\u8868\u3057\u307e\u3059. 1 \u30de\u30eb\u30b3\u30d5\u904e\u7a0b\u3068\u306f \u201c\u73fe\u5728\u306e\u72b6\u614b \\(x\\) \u304b\u3089\u6b21\u306e\u72b6\u614b \\(x'\\) \u3078\u9077\u79fb\u3059\u308b\u78ba\u7387 \\(\\pi(x \\to x')\\) \u304c\u73fe\u5728\u306e\u72b6\u614b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u201d \u3068\u3044\u3046\u904e\u7a0b\u3092\u8868\u3057\u3066\u3044\u307e\u3059. 2 \u3042\u308b\u6761\u4ef6\u306e\u3082\u3068\u3067\u306f\u5341\u5206\u306b\u9577\u3044\u6642\u9593\u9077\u79fb\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306e \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u306e\u5206\u5e03\u304c (\u521d\u671f\u5024 \\(x_0\\) \u306b\u4f9d\u3089\u305a) \u3042\u308b\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059. 3 \u3053\u306e\u5206\u5e03\u306e\u3053\u3068\u3092\u5b9a\u5e38\u5206\u5e03\u3068\u547c\u3073\u307e\u3059. \u3042\u308b\u6642\u523b \\(t\\) \u307e\u3067\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3068\u304d\u306b\u671f\u5f85\u3055\u308c\u308b \\(x\\) \u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092 \\(\\mathcal{P}_t(x)\\) \u3068\u3057\u307e\u3059. \u3053\u3053\u304b\u3089\u6642\u523b \\(t+1\\) \u306b\u304a\u3051\u308b\u5206\u5e03 \\(\\mathcal{P}_{t+1}(x)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059. 4 \\[ \\mathcal{P}_{t+1}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}_{t}(x)\\pi(x \\to x'). \\] \\(t \\to \\infty\\) \u306e\u3068\u304d\u306b \\(\\mathcal{P}_{t}(x)\\) \u304c\u5b9a\u5e38\u5206\u5e03\u306b\u53ce\u675f\u3059\u308b\u306e\u3067\u3042\u308c\u3070 \\(\\mathcal{P}(x)\\) \u306f, \\[ \\mathcal{P}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}(x)\\pi(x \\to x'). \\] \u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059. \u307e\u305f, \u3053\u3046\u3057\u305f\u5b9a\u5e38\u5206\u5e03\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u306b\u306f, \u72b6\u614b\u9077\u79fb\u306e\u30eb\u30fc\u30eb\u306b\u3082\u5236\u7d04\u304c\u3042\u308a\u307e\u3059. \u307e\u305a, \u5b58\u5728\u3059\u308b\u3069\u306e\u72b6\u614b\u30da\u30a2 \\((x, x')\\) \u3082\u6709\u9650\u56de\u306e\u64cd\u4f5c\u3067\u9077\u79fb\u3067\u304d\u308b (\u72b6\u614b\u304c\u5206\u65ad\u3055\u308c\u3066\u3044\u306a\u3044) \u3053\u3068\u304c\u5fc5\u8981\u3067\u3059. \u52a0\u3048\u3066, \u72b6\u614b\u306e\u9077\u79fb\u306b\u306f\u975e\u5468\u671f\u6027\u3082\u5fc5\u8981\u3068\u3055\u308c\u307e\u3059\u304c, \u3053\u3053\u3067\u306f\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3057\u307e\u3059. 5 \u5341\u5206\u306b\u9577\u3044\u6642\u9593\u30de\u30eb\u30b3\u30d5\u9023\u9396\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u3092\u5b9a\u5e38\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u4e71\u6570\u3068\u307f\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u3053\u3053\u3067\u72b6\u614b\u9077\u79fb\u306e\u30eb\u30fc\u30eb\u3092\u3046\u307e\u304f\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u53ce\u675f\u5148\u306e\u5b9a\u5e38\u5206\u5e03\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3088\u3046\u306a\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u8a2d\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070, \u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570\u304b\u3089\u306e\u4e71\u6570\u3092\u52b9\u7387\u3088\u304f\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059. \u5206\u5e03\u306e\u53ce\u675f\u6027\u306b\u3064\u3044\u3066\u306e\u30b3\u30e1\u30f3\u30c8 \u3053\u3053\u3067\u306f\u64cd\u4f5c\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u671f\u5f85\u3055\u308c\u308b\u5206\u5e03\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u308f\u3063\u3066\u3044\u304f\u304b\u3092\u8003\u3048\u308b\u3053\u3068\u3067, \u5206\u5e03\u306e\u53ce\u675f\u6027\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059. \\(t=0\\) \u306e\u3068\u304d\u306b\u671f\u5f85\u3055\u308c\u308b \\(x\\) \u306e\u5206\u5e03\u3092 \\(\\mathcal{P}_0{x}\\) \u3068\u3057\u307e\u3059. \u3053\u308c\u306f\u521d\u671f\u72b6\u614b\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u4efb\u610f\u306e\u5206\u5e03\u3067\u3059. 1 \u30b9\u30c6\u30c3\u30d7\u5f8c\u306e\u5206\u5e03\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\mathcal{P}_1(x) = \\int\\mathrm{d}x'\\,\\mathcal{P}_0(x')\\pi(x' \\to x) = c\\mathcal{P}(x) + (1-c)R_0(x). \\] \u305f\u3060\u3057 \\(0 < c < 1\\) \u3067 \\(\\mathcal{P}_0(x)\\) \u306b\u4f9d\u3089\u306a\u3044\u5b9a\u6570\u306b\u306a\u308a\u307e\u3059 (\u3053\u306e\u5f62\u3067\u66f8\u3051\u308b\u3053\u3068\u306e\u8a3c\u660e\u306f\u7701\u7565\u3057\u307e\u3059). \\(\\pi(x \\to x')\\) \u306e\u64cd\u4f5c\u3092\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066 \\(\\mathcal{P}_1(x)\\) \u304b\u3089 \\(c\\) \u500d\u3060\u3051 \\(\\mathcal{P}(x)\\) \u3092\u524a\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u540c\u3058\u72b6\u614b\u9077\u79fb\u3092\u5b9f\u884c\u3059\u308b\u3068, \\[ \\begin{aligned} \\mathcal{P}_2(x) &= c\\mathcal{P}(x) + (1-c)(c\\mathcal{P}(x) + (1-c)R_1(x)) \\\\ &= \\left(1 - (1-c)^2\\right) \\mathcal{P}(x) + (1-c)^2 R_1(x) \\end{aligned} \\] \u3068\u5909\u63db\u3067\u304d\u307e\u3059. \u305f\u3060\u3057 \\(R_0(x)\\) \u3092\u521d\u671f\u5206\u5e03\u3068\u3057\u3066 \\(c\\mathcal{P}(x)\\) \u3092\u524a\u308a\u3060\u3059\u64cd\u4f5c\u3092\u518d\u3073\u304a\u3053\u3063\u3066\u3044\u307e\u3059. \u72b6\u614b\u9077\u79fb\u3092 \\(m\\) \u56de\u7e70\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u4ee5\u4e0b\u306e\u5f0f\u3092\u5f97\u307e\u3059. \\[ \\mathcal{P}_m(x) = \\left(1 - (1-c)^m\\right) \\mathcal{P}(x) + (1-c)^m R_{m-1}(x). \\] \\(m \\to \\infty\\) \u306e\u6975\u9650\u3067\u4efb\u610f\u306e\u5206\u5e03 \\(\\mathcal{P}_0(x)\\) \u304b\u3089 \\(\\mathcal{P}(x)\\) \u306b\u53ce\u675f\u3059\u308b\u3053\u3068\u304c\u793a\u305b\u307e\u3057\u305f.","title":"\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3068\u306f"},{"location":"mcmc/markov_chain/#_3","text":"\u3053\u3053\u307e\u3067, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u5b9a\u5e38\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f. \u6b21\u306b\u5b9a\u5e38\u5206\u5e03 \\(\\mathcal{P}(x)\\) \u3092\u4efb\u610f\u306e\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059. \u5b9a\u5e38\u5206\u5e03\u304c\u6e80\u305f\u3059\u3079\u304d\u5f0f\u306f \\[ \\mathcal{P}(x') = \\int\\mathrm{d}x\\,\\mathcal{P}(x)\\pi(x \\to x') \\] \u3067\u3059. \u3053\u306e\u5f0f\u304c \\(\\mathcal{P}(x) \\gets P(x)\\) \u3067\u6210\u7acb\u3059\u308b\u9077\u79fb\u78ba\u7387 \\(\\pi(x \\to x')\\) \u3092\u8a2d\u8a08\u3059\u308b\u305f\u3081\u306b\u306f, \u3042\u3089\u3086\u308b\u9077\u79fb\u306b\u3064\u3044\u3066\u77db\u76fe\u304c\u7121\u3044\u3088\u3046\u306b\u3064\u3058\u3064\u307e\u3092\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. \u3053\u308c\u3092\u6e80\u305f\u3059\u9077\u79fb\u3092\u8003\u3048\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u306e\u3067, \u4e0a\u8a18\u306e\u3064\u308a\u3042\u3044\u3092\u6e80\u305f\u3059\u305f\u3081\u306e\u5341\u5206\u6761\u4ef6\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u8003\u3048\u307e\u3059. \\[ \\mathcal{P}(x')\\pi(x' \\to x) = \\mathcal{P}(x)\\pi(x \\to x'). \\] \u3053\u308c\u3092\u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3068\u547c\u3073\u307e\u3059. \u4e21\u8fba\u3092 \\(x\\) \u306b\u3064\u3044\u3066\u7a4d\u5206\u3059\u308c\u3070\u5143\u306e\u5f0f\u306b\u623b\u308b\u305f\u3081, \u5341\u5206\u6761\u4ef6\u3068\u3057\u3066\u6210\u7acb\u3057\u3066\u3044\u308b\u3053\u3068\u306f\u81ea\u660e\u3067\u3059. \u4efb\u610f\u306e \\((x, x')\\) \u306b\u3064\u3044\u3066 \\[ {P}(x')\\pi(x' \\to x) = {P}(x)\\pi(x \\to x') \\] \u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u72b6\u614b\u9077\u79fb\u3092\u8a2d\u8a08\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u304b\u3089 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u305d\u306e\u305f\u3081\u306e\u624b\u6cd5\u306e\u3072\u3068\u3064\u304c Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059.","title":"\u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u308b\u30b5\u30f3\u30d7\u30eb\u751f\u6210"},{"location":"mcmc/markov_chain/#metropolis-hastings-algorithm","text":"Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u751f\u6210\u3057\u307e\u3059. \u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u304b\u3089\u6b21\u306e\u72b6\u614b\u306e\u5019\u88dc \\(x_p\\) \u3092\u78ba\u7387\u5206\u5e03 \\(Q(x_p; x_t)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b. 6 \\(P(x)\\) , \\(Q(x_p; x)\\) \u304b\u3089\u4ee5\u4e0b\u306e\u91cf\u3092\u8a08\u7b97\u3059\u308b. 7 \\[ \\alpha = \\frac{P(x_p)}{P(x_t)}\\frac{Q(x_t;x_p)}{Q(x_p; x_t)} \\] \\([0,1)\\) \u306e\u4e00\u69d8\u5206\u5e03\u304b\u3089\u4e71\u6570 \\(u\\) \u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b. \\(u \\leq \\alpha\\) \u3067\u3042\u308c\u3070\u63d0\u6848\u3055\u308c\u305f\u72b6\u614b \\(x_p\\) \u3092 \\(x_{t+1}\\) \u3068\u3057\u3066\u63a1\u7528\u3059\u308b. \\(u > \\alpha\\) \u3067\u3042\u308c\u3070\u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u3092 \\(x_{t+1}\\) \u3068\u3057\u3066\u63a1\u7528\u3059\u308b. \u3053\u306e\u3088\u3046\u306b\u72b6\u614b\u9077\u79fb\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u78ba\u7387\u5206\u5e03 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059. \u305f\u3060\u3057, \u6b21\u306e\u72b6\u614b\u3092\u63d0\u6848\u3059\u308b\u78ba\u7387\u5206\u5e03 \\(Q(x_p; x)\\) \u306e\u9078\u629e\u306b\u3088\u3063\u3066\u306f\u51fa\u529b\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5217 \\(\\{x_t\\}_{t=0{\\ldots}}\\) \u306e\u5206\u5e03\u304c \\(P(x)\\) \u3078\u3068\u53ce\u675f\u3059\u308b\u307e\u3067\u306b\u6570\u591a\u304f\u306e\u72b6\u614b\u9077\u79fb\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059. \u72b6\u614b \\(x\\) \u306e\u8fd1\u508d\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306b\u306f, \u63d0\u6848\u5206\u5e03 \\(Q(x_p; x)\\) \u306f \\(x\\) \u3092\u4e2d\u5fc3\u3068\u3057\u305f\u591a\u6b21\u5143\u6b63\u898f\u5206\u5e03\u306e\u3088\u3046\u306a\u5206\u5e03\u304c\u591a\u304f\u63a1\u7528\u3055\u308c\u307e\u3059. \u3053\u306e\u63d0\u6848\u5206\u5e03\u306e\u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u5e83\u3059\u304e\u308b\u3068\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u76f4\u9762\u3057\u305f\u554f\u984c\u304c\u518d\u71c3\u3057\u3066\u53ce\u675f\u304c\u9045\u304f\u306a\u308a\u307e\u3059. \u4e00\u65b9\u3067, \u30b9\u30c6\u30c3\u30d7\u5e45\u304c\u72ed\u3059\u304e\u3066\u3082\u78ba\u7387\u5206\u5e03\u3092\u8986\u3044\u5c3d\u304f\u3059\u307e\u3067\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u306b\u53ce\u675f\u304c\u9045\u304f\u306a\u308a\u307e\u3059. \u63d0\u6848\u5206\u5e03\u306e\u9078\u629e\u306f\u3042\u308b\u7a0b\u5ea6\u8a66\u884c\u932f\u8aa4\u3057\u306a\u304c\u3089\u6c7a\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059. Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3053\u3068\u306e\u78ba\u8a8d \u307e\u305a\u306f \\(\\alpha \\leq 1\\) \u306e\u30b1\u30fc\u30b9\u3092\u8003\u3048\u307e\u3059. \\(x_t \\to x_p\\) \u3078\u3068\u9077\u79fb\u3059\u308b\u78ba\u7387 \\(\\pi(x_t \\to x_p)\\) \u306f \\(Q(x_p; x_t)\\) \u304b\u3089 \\(x_p\\) \u304c\u9078\u3070\u308c, \u304b\u3064\u78ba\u7387 \\(\\alpha\\) \u3067\u63a1\u629e\u3055\u308c\u308b\u3068\u3044\u3046\u6761\u4ef6\u306b\u306a\u308a\u307e\u3059. \u4e00\u65b9, \\(x_p \\to x_t\\) \u3078\u3068\u9077\u79fb\u3059\u308b\u904e\u7a0b\u3067\u306f \\(\\alpha\\) \u306b\u76f8\u5f53\u3059\u308b\u91cf\u304c\u304b\u306a\u3089\u305a 1 \u3092\u8d85\u3048\u308b (\u9006\u6570\u306b\u306a\u308b) \u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\left\\{~\\begin{aligned} \\pi(x_t \\to x_p) &= \\alpha Q(x_p; x_t) \\\\ \\pi(x_p \\to x_t) &= Q(x_t; x_p) \\end{aligned}\\right., \\] \u3088\u3063\u3066 \\(P(x_t)\\pi(x_t \\to x_p)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068, \\[ P(x_t)\\pi(x_t \\to x_p) = P(x_t) \\frac{P(x_p)}{P(x_t)}\\frac{Q(x_t; x_p)}{Q(x_p; x_t)}Q(x_p; x_t) = P(x_p)Q(x_t; x_p) \\] \u3068\u306a\u308a\u307e\u3059. \u540c\u69d8\u306b \\(P(x_p)\\pi(x_p \\to x_t)\\) \u3092\u8a08\u7b97\u3059\u308b\u3068, \\[ P(x_p)\\pi(x_p \\to x_t) = P(x_p)Q(x_t; x_p) \\] \u3068\u306a\u308b\u305f\u3081, \u8a73\u7d30\u3064\u308a\u3042\u3044\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059. \\(\\alpha > 1\\) \u306e\u5834\u5408\u3082\u540c\u69d8\u306b\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059.","title":"Metropolis-Hastings algorithm"},{"location":"mcmc/markov_chain/#gibbs-sampling","text":"Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7279\u6b8a\u306a\u4f8b\u306b Gibbs \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3046\u624b\u6cd5\u304c\u3042\u308a\u307e\u3059. \u591a\u6b21\u5143\u306e\u78ba\u7387\u5bc6\u5ea6\u5206\u5e03 \\(P(x)\\) \u5168\u4f53\u3092\u4e00\u5ea6\u306b\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u3044\u3068\u3057\u3066\u3082, \u3042\u308b 1 \u6b21\u5143\u3060\u3051, \u3042\u308b\u3044\u306f\u3042\u308b\u90e8\u5206\u7a7a\u9593\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u305f\u6761\u4ef6\u4ed8\u304d\u5206\u5e03\u3060\u3051\u306f\u53b3\u5bc6\u306b\u6c42\u3081\u3089\u308c\u308b\u3068\u3044\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059. Gibbls \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3092\u751f\u6210\u3057\u307e\u3059. \u73fe\u5728\u306e\u72b6\u614b \\(x_t\\) \u304b\u3089\u66f4\u65b0\u3059\u308b\u6b21\u5143 \\(i\\) \u3092\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3059\u308b. 8 \u6b21\u306e\u72b6\u614b \\(x_p\\) \u3092 \\(P(x_t^{(i)}|x_t^{({\\neg}\\,i)})\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \\(x^i\\) , \\(x^{\\neg i}\\) \u306f\u305d\u308c\u305e\u308c \\(x\\) \u306e \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u306e\u307f\u306e\u6210\u5206\u3068 \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u3092\u3092\u9664\u3044\u305f\u6210\u5206\u3092\u8868\u3057\u3066\u3044\u307e\u3059. \u6b21\u306e\u72b6\u614b \\(x_p\\) \u3092\u9078\u629e\u3059\u308b\u63d0\u6848\u5206\u5e03 \\(Q(x_p; x)\\) \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ Q(x_p; x_t) = P(i)P(x_p^{i}|x_t^{{\\neg}i}), \\quad Q(x_t; x_p) = P(i)P(x_t^{i}|x_t^{{\\neg}i}) \\] \u3053\u3053\u3067 \\(P(i)\\) \u306f \\(i\\) \u756a\u76ee\u306e\u6b21\u5143\u304c\u9078\u3070\u308c\u308b\u78ba\u7387\u3067\u3059. \\(\\alpha\\) \u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059. \\[ \\alpha = \\frac{P(x_p)}{P(x_t)} \\frac{P(i)P(x_t^{i}|x_t^{{\\neg}i})}{P(i)P(x_p^{i}|x_t^{{\\neg}i})} \\] \u5206\u6bcd\u5206\u5b50\u306b \\(P(x_t^{\\neg{i}})\\) \u3092\u304b\u3051\u308b\u3068 \\(\\alpha = 1\\) \u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059. Gibbs \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u63d0\u6848\u5206\u5e03\u306b\u53b3\u5bc6\u306a\u6761\u4ef6\u4ed8\u304d\u78ba\u7387\u5206\u5e03\u3092\u7528\u3044\u308b\u3053\u3068\u306b\u3088\u3063\u3066, \u5fc5\u305a\u63a1\u629e\u3055\u308c\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u305f Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3060\u3068\u89e3\u91c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u307e\u305f, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306e\u521d\u671f\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u3064\u3044\u3066\u306f\u521d\u671f\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u6642\u671f\u304c\u3042\u308a\u307e\u3059. \u8a08\u7b97\u7d50\u679c\u304c\u521d\u671f\u72b6\u614b\u306b\u4f9d\u3089\u306a\u3044\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u521d\u671f\u306e\u3044\u304f\u3089\u304b\u306e\u5272\u5408\u3092\u6368\u3066\u53bb\u308b\u3068\u3044\u3046\u4f5c\u696d\u3092\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059. \u3053\u306e\u904e\u7a0b\u3092 burn-in \u3068\u547c\u3073\u307e\u3059. \u6642\u7cfb\u5217\u3063\u307d\u3055\u3092\u610f\u8b58\u3057\u3066\u306a\u3093\u3068\u306a\u304f index \u3092 \\(t\\) \u306b\u3057\u3066\u3044\u307e\u3059\u304c, \u3042\u307e\u308a\u6df1\u3044\u610f\u5473\u306f\u3042\u308a\u307e\u305b\u3093. \u21a9 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u5834\u5408 (\u72b6\u614b\u7a7a\u9593\u30e2\u30c7\u30eb) \u306a\u3069\u3067\u306f \\(x_t\\) \u304b\u3089 \\(x_{t+1}\\) \u3078\u306e\u9077\u79fb\u78ba\u7387\u3092\u5b9a\u3081\u308b \u201c\u73fe\u5728\u306e\u72b6\u614b\u201d \u3068\u3057\u3066 \\(\\tilde{x}_t = (x_{t-2},x_{t-1},x_{t})^T\\) \u306e\u3088\u3046\u306b\u904e\u53bb\u306e\u60c5\u5831\u3092\u542b\u3081\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059. \u21a9 \u4e71\u6570\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u3044\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u3068\u306e\u6df7\u540c\u3092\u907f\u3051\u308b\u305f\u3081\u306b, \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5217\u306b\u671f\u5f85\u3055\u308c\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570\u3092 \\(\\mathcal{P}(x)\\) \u3068\u30d5\u30a9\u30f3\u30c8\u3092\u5c11\u3057\u5909\u3048\u3066\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059. \u21a9 \u9023\u7d9a\u5206\u5e03\u3068\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u304c \\(x\\) \u304c\u96e2\u6563\u7684\u306a\u5834\u5408\u306f\u548c\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044. \u21a9 \u30c1\u30a7\u30c3\u30ab\u30fc\u30dc\u30fc\u30c9\u306e\u4e0a\u3092 1 \u30de\u30b9\u305a\u3064\u79fb\u52d5\u3059\u308b\u30b3\u30de\u3092\u8003\u3048\u3066\u307f\u307e\u3059. \u30b3\u30de\u306e\u5206\u5e03\u306f\u3053\u306e\u5834\u5408 \\(t\\) \u304c\u5947\u6570\u306e\u3068\u304d\u3068\u5076\u6570\u306e\u3068\u304d\u3067\u305d\u308c\u305e\u308c\u5b9a\u5e38\u5206\u5e03\u306b\u53ce\u675f\u3057\u307e\u3059\u304c, \u5168\u4f53\u3067\u898b\u305f\u3068\u304d\u306f \\(\\mathcal{P}_\\mathrm{odd}(x)\\) , \\(\\mathcal{P}_\\mathrm{even}(x)\\) \u3067\u632f\u52d5\u3057\u3066\u3057\u307e\u3044\u53ce\u675f\u3057\u307e\u305b\u3093. \u975e\u5468\u671f\u6027\u306f\u3053\u3046\u3057\u305f\u30b1\u30fc\u30b9\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u306b\u8981\u6c42\u3055\u308c\u307e\u3059. \u21a9 \\(x\\) \u306e\u8fd1\u508d\u3092\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u3044\u306e\u3067 \\(x\\) \u3092\u30d1\u30e9\u30e1\u30bf\u3068\u3057\u3066\u6301\u3061\u307e\u3059. \u78ba\u7387\u5206\u5e03\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u7269\u7406\u7684\u306b\u610f\u5473\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u3044 (\u3042\u308b\u3068\u306f\u9650\u3089\u306a\u3044) \u306e\u3067\u6587\u5b57\u306b \\(Q\\) \u3092\u4f7f\u3044\u307e\u3057\u305f. \u21a9 \\(\\alpha\\) \u306e\u8a08\u7b97\u3067\u306f\u6bd4\u3092\u3068\u308b\u306e\u3067 \\(P(x)\\) \u306e\u898f\u683c\u5316\u5b9a\u6570\u306f\u672a\u77e5\u306e\u307e\u307e\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093. \u21a9 \u5fc5\u305a\u3057\u3082\u30e9\u30f3\u30c0\u30e0\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u304f\u9806\u756a\u306b\u9078\u3093\u3067\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093. \u21a9","title":"Gibbs sampling"},{"location":"mcmc/references/","text":"\u53c2\u8003\u6587\u732e \u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u5927\u3044\u306b\u53c2\u8003\u306b\u3057\u305f\u66f8\u7c4d\u30fb\u8ad6\u6587\u3067\u3059. \u7d71\u8a08\u79d1\u5b66\u306e\u30d5\u30ed\u30f3\u30c6\u30a3\u30a2 12 \u8a08\u7b97\u7d71\u8a08II \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u305d\u306e\u5468\u8fba : \u4f0a\u5ead\u5e78\u4eba, \u7a2e\u6751\u6b63\u7f8e, \u5927\u68ee\u88d5\u6d69, \u548c\u5408\u8087, \u4f50\u85e4\u6574\u5c1a, \u9ad8\u6a4b\u660e\u5f66","title":"\u53c2\u8003\u6587\u732e"},{"location":"mcmc/references/#_1","text":"\u3053\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u5927\u3044\u306b\u53c2\u8003\u306b\u3057\u305f\u66f8\u7c4d\u30fb\u8ad6\u6587\u3067\u3059. \u7d71\u8a08\u79d1\u5b66\u306e\u30d5\u30ed\u30f3\u30c6\u30a3\u30a2 12 \u8a08\u7b97\u7d71\u8a08II \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u305d\u306e\u5468\u8fba : \u4f0a\u5ead\u5e78\u4eba, \u7a2e\u6751\u6b63\u7f8e, \u5927\u68ee\u88d5\u6d69, \u548c\u5408\u8087, \u4f50\u85e4\u6574\u5c1a, \u9ad8\u6a4b\u660e\u5f66","title":"\u53c2\u8003\u6587\u732e"},{"location":"mcmc/scratchbuild_mcmc/","text":"MCMC \u2013 Do it Yourself \u3053\u3053\u3067\u306f Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u8a08\u7b97\u3092\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3059. MHMCMC Sampler \u30af\u30e9\u30b9 aaa HMMCMCSampler.py #!/usr/bin/env python # -*- coding: utf-8 -*- from numpy.random import default_rng import numpy as np class MHMCMCSampler : ''' MCMC sampler with the Metropolis-Hastings algorithm. ''' def __init__ ( self , likelihood , proposal_dist , seed = 2021 ): ''' Generate a MCMC sampler instatnce. Parameters: likelihood (obj): Likelihood class. proposal_dist (obj): ProposalDistribution class. seed (float, optional): Random seed value. ''' self . likelihood = likelihood self . proposal_dist = proposal_dist self . random = default_rng ( seed ) self . initialize ( None ) def initialize ( self , x0 ): ''' Initialize state. Parameters: x0 (numpy.ndarray): An initial state (1-dimensional vector). ''' self . state = x0 def step ( self ): ''' Draw a next Monte-Carlo step. Returns: numpy.ndarray: the next state. ''' proposal = self . proposal_dist . draw ( self . state ) log_alpha = \\ self . likelihood . eval ( proposal ) - self . likelihood . eval ( self . state ) \\ + self . proposal_dist . eval ( self . state , proposal ) \\ - self . proposal_dist . eval ( proposal , self . state ) log_u = np . log ( self . random . uniform ( 0 , 1 )) return proposal if ( log_u < log_alpha ) else self . state def generate ( self , n_sample ): ''' Generate N-samples Parameters: n_samples (int): Number of MCMC samples to generate. ''' samples = [] for n in range ( n_sample ): samples . append ( self . state ) self . state = self . step () return np . vstack ( samples ) class AbstractLikelihood : ''' A template of likelihood function.''' def eval ( self , x ): ''' Evaluate the log-likelihood for the state `x`. Parameters: x (numpy.ndarray): An input state (1-dimensional vector). Returns: float: The log-likelihood, logL(x). ''' pass class AbstractProposalDistribution : ''' A template of proposed distribution. ''' def draw ( self , x0 ): ''' Propose a new state. Parameters: x0 (numpy.ndarray): The current state. Returns: numpy.ndarray: A newly-proposed state. ''' def eval ( self , x , x0 ): ''' Evaluate the log-probability for the state `x`. Parameters: x (numpy.ndarray): The proposed state. x0 (numpy.ndarray): The current state. Returns: float: The log-probability, logQ(x, x0). ''' def display_results ( res , dim = None , skip = 1 , output = None ): ''' Display the trace and histogram of samples. Parameters: res (numpy.ndarray): MCMC sample with the size of [Nample, Ndim]. dim (int, optional): Dimension to be investigated. If not specified, The first dimension is selected by default. skip (int, optional): Pick up every {skip} sample. If not specified, Do not skip any samples by default. output (str, optional): Save figure as image. ''' import matplotlib.pyplot as plt if dim is None : dim = list ( range ( res . shape [ 1 ])) if not isinstance ( dim , list ): dim = [ dim ,] ndim = len ( dim ) fig = plt . figure () axes = [] for n , d in enumerate ( dim ): axes . append ([ fig . add_subplot ( ndim , 2 , 1 + n * 2 ), fig . add_subplot ( ndim , 2 , 2 + n * 2 )]) for ax , d in zip ( axes , dim ): val = res [:: skip , d ] ax [ 0 ] . plot ( val ) ax [ 0 ] . set_ylabel ( f 'trace of X { d } ' ) ax [ 1 ] . hist ( val , bins = min ( 200 , max ( int ( val . size / 25 ), 20 )), density = True ) ax [ 1 ] . set_ylabel ( f 'frequency of X { d } ' ) plt . tight_layout () if output : fig . savefig ( output ) plt . show () if __name__ == '__main__' : from argparse import ArgumentParser as ap parser = ap ( description = 'demo for HMMCMCSampler' ) parser . add_argument ( '-n' , '--num' , dest = 'num' , metavar = 'n' , type = int , default = 10000 , help = 'number of monte carlo samples.' ) parser . add_argument ( '-b' , '--burnin' , dest = 'burn' , metavar = 'n' , type = int , default = 1000 , help = 'number of burn-in steps.' ) parser . add_argument ( '--step' , metavar = 'n' , type = float , default = 0.2 , help = 'step width of a Monte Carlo step.' ) parser . add_argument ( '--png' , metavar = 'filename' , type = str , help = 'output figure name.' ) args = parser . parse_args () class logL ( AbstractLikelihood ): def __init__ ( self , center = [ 3 , 5 , - 1 ], sigma = 1.0 ): self . center = np . array ( center ) self . sigma = sigma def eval ( self , x ): return np . sum ( - ( x - self . center ) ** 2 / 2.0 / self . sigma ** 2 ) class logQ ( AbstractProposalDistribution ): def __init__ ( self , step ): self . step = step self . gen = default_rng ( 2021 ) def draw ( self , x0 ): return x0 + self . gen . normal ( 0 , self . step , size = x0 . shape ) def eval ( self , x , x0 ): return np . sum ( - ( x - x0 ) ** 2 / ( 2 * self . step ** 2 )) mcmc = MHMCMCSampler ( logL (), logQ ( args . step )) x0 = np . zeros ( 3 ) mcmc . initialize ( x0 ) val = mcmc . generate ( args . num + args . burn ) val = val [ args . burn :] display_results ( val , skip = 5 , output = args . png )","title":"MCMC -- Do it Yourself"},{"location":"mcmc/scratchbuild_mcmc/#mcmc-do-it-yourself","text":"\u3053\u3053\u3067\u306f Metropolis-Hastings \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066\u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u8a08\u7b97\u3092\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3059.","title":"MCMC -- Do it Yourself"},{"location":"mcmc/scratchbuild_mcmc/#mhmcmc-sampler","text":"aaa HMMCMCSampler.py #!/usr/bin/env python # -*- coding: utf-8 -*- from numpy.random import default_rng import numpy as np class MHMCMCSampler : ''' MCMC sampler with the Metropolis-Hastings algorithm. ''' def __init__ ( self , likelihood , proposal_dist , seed = 2021 ): ''' Generate a MCMC sampler instatnce. Parameters: likelihood (obj): Likelihood class. proposal_dist (obj): ProposalDistribution class. seed (float, optional): Random seed value. ''' self . likelihood = likelihood self . proposal_dist = proposal_dist self . random = default_rng ( seed ) self . initialize ( None ) def initialize ( self , x0 ): ''' Initialize state. Parameters: x0 (numpy.ndarray): An initial state (1-dimensional vector). ''' self . state = x0 def step ( self ): ''' Draw a next Monte-Carlo step. Returns: numpy.ndarray: the next state. ''' proposal = self . proposal_dist . draw ( self . state ) log_alpha = \\ self . likelihood . eval ( proposal ) - self . likelihood . eval ( self . state ) \\ + self . proposal_dist . eval ( self . state , proposal ) \\ - self . proposal_dist . eval ( proposal , self . state ) log_u = np . log ( self . random . uniform ( 0 , 1 )) return proposal if ( log_u < log_alpha ) else self . state def generate ( self , n_sample ): ''' Generate N-samples Parameters: n_samples (int): Number of MCMC samples to generate. ''' samples = [] for n in range ( n_sample ): samples . append ( self . state ) self . state = self . step () return np . vstack ( samples ) class AbstractLikelihood : ''' A template of likelihood function.''' def eval ( self , x ): ''' Evaluate the log-likelihood for the state `x`. Parameters: x (numpy.ndarray): An input state (1-dimensional vector). Returns: float: The log-likelihood, logL(x). ''' pass class AbstractProposalDistribution : ''' A template of proposed distribution. ''' def draw ( self , x0 ): ''' Propose a new state. Parameters: x0 (numpy.ndarray): The current state. Returns: numpy.ndarray: A newly-proposed state. ''' def eval ( self , x , x0 ): ''' Evaluate the log-probability for the state `x`. Parameters: x (numpy.ndarray): The proposed state. x0 (numpy.ndarray): The current state. Returns: float: The log-probability, logQ(x, x0). ''' def display_results ( res , dim = None , skip = 1 , output = None ): ''' Display the trace and histogram of samples. Parameters: res (numpy.ndarray): MCMC sample with the size of [Nample, Ndim]. dim (int, optional): Dimension to be investigated. If not specified, The first dimension is selected by default. skip (int, optional): Pick up every {skip} sample. If not specified, Do not skip any samples by default. output (str, optional): Save figure as image. ''' import matplotlib.pyplot as plt if dim is None : dim = list ( range ( res . shape [ 1 ])) if not isinstance ( dim , list ): dim = [ dim ,] ndim = len ( dim ) fig = plt . figure () axes = [] for n , d in enumerate ( dim ): axes . append ([ fig . add_subplot ( ndim , 2 , 1 + n * 2 ), fig . add_subplot ( ndim , 2 , 2 + n * 2 )]) for ax , d in zip ( axes , dim ): val = res [:: skip , d ] ax [ 0 ] . plot ( val ) ax [ 0 ] . set_ylabel ( f 'trace of X { d } ' ) ax [ 1 ] . hist ( val , bins = min ( 200 , max ( int ( val . size / 25 ), 20 )), density = True ) ax [ 1 ] . set_ylabel ( f 'frequency of X { d } ' ) plt . tight_layout () if output : fig . savefig ( output ) plt . show () if __name__ == '__main__' : from argparse import ArgumentParser as ap parser = ap ( description = 'demo for HMMCMCSampler' ) parser . add_argument ( '-n' , '--num' , dest = 'num' , metavar = 'n' , type = int , default = 10000 , help = 'number of monte carlo samples.' ) parser . add_argument ( '-b' , '--burnin' , dest = 'burn' , metavar = 'n' , type = int , default = 1000 , help = 'number of burn-in steps.' ) parser . add_argument ( '--step' , metavar = 'n' , type = float , default = 0.2 , help = 'step width of a Monte Carlo step.' ) parser . add_argument ( '--png' , metavar = 'filename' , type = str , help = 'output figure name.' ) args = parser . parse_args () class logL ( AbstractLikelihood ): def __init__ ( self , center = [ 3 , 5 , - 1 ], sigma = 1.0 ): self . center = np . array ( center ) self . sigma = sigma def eval ( self , x ): return np . sum ( - ( x - self . center ) ** 2 / 2.0 / self . sigma ** 2 ) class logQ ( AbstractProposalDistribution ): def __init__ ( self , step ): self . step = step self . gen = default_rng ( 2021 ) def draw ( self , x0 ): return x0 + self . gen . normal ( 0 , self . step , size = x0 . shape ) def eval ( self , x , x0 ): return np . sum ( - ( x - x0 ) ** 2 / ( 2 * self . step ** 2 )) mcmc = MHMCMCSampler ( logL (), logQ ( args . step )) x0 = np . zeros ( 3 ) mcmc . initialize ( x0 ) val = mcmc . generate ( args . num + args . burn ) val = val [ args . burn :] display_results ( val , skip = 5 , output = args . png )","title":"MHMCMC Sampler \u30af\u30e9\u30b9"},{"location":"mcmc/static_monte_carlo/","text":"\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5 \u3053\u3053\u3067\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u306f\u306a\u3044\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u7528\u3044\u3066\u8a08\u7b97\u3092\u3059\u308b\u65b9\u6cd5\u3068\u305d\u306e\u9650\u754c\u306b\u3064\u3044\u3066\u89e6\u308c\u307e\u3059. \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3068\u5bfe\u6bd4\u3059\u308b\u305f\u3081\u306b, \u3053\u3053\u3067\u306f\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059. 1 \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u671f\u5f85\u5024\u8a08\u7b97 \u306f\u3058\u3081\u306b \u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b, \u3042\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) \u304b\u3089\u8a08\u7b97\u3055\u308c\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u77e5\u308a\u305f\u3051\u308c\u3070, \u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u751f\u6210\u3057\u3066\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u624b\u6cd5\u304c\u4f7f\u3048\u307e\u3059. \u3053\u3053\u3067, \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u8a2d\u5b9a\u3092\u8003\u3048\u307e\u3059. \u9006\u95a2\u6570\u6cd5\u306e\u3088\u3046\u306b\u5909\u6570\u5909\u63db\u306b\u3088\u3063\u3066 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044. \\(P(x)\\) \u306f\u898f\u683c\u5316\u5b9a\u6570\u3092\u9664\u3044\u3066\u5bb9\u6613\u306b\u8a08\u7b97\u3067\u304d\u308b. \u5225\u306e\u8a00\u3044\u65b9\u3092\u3059\u308b\u3068, \\(P(x)\\) \u3068 \\(P(x')\\) \u306e\u6bd4\u306f\u5bb9\u6613\u306b\u8a08\u7b97\u3067\u304d\u308b\u304c, \\(P(x)\\) \u306e\u7d76\u5bfe\u7684\u306a\u5024\u306f\u308f\u304b\u3089\u306a\u3044. \u524d\u8005\u306b\u3064\u3044\u3066\u306f, \u89e3\u6790\u7684\u306a\u89e3\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u3044\u3046\u8a71\u306a\u306e\u3067\u7279\u306b\u89e3\u8aac\u306e\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059. \u307e\u305f, Bayes \u306e\u5b9a\u7406\u306b\u57fa\u3065\u3044\u3066\u7acb\u5f0f\u3059\u308b\u3068\u5f8c\u8005\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306b\u5ea6\u3005\u906d\u9047\u3057\u307e\u3059. \u5b9f\u9a13\u30fb\u89b3\u6e2c\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf \\(D\\) \u3092\u5f97\u305f\u3068\u304d\u306b\u30d1\u30e9\u30e1\u30bf\u304c \\(\\alpha\\) \u3067\u3042\u308b\u78ba\u7387\u306f \\[ P(\\alpha | D) = \\frac{1}{Z}P(D | \\alpha)P(\\alpha), \\] \u3068\u66f8\u3051\u307e\u3059. \u3053\u3053\u3067 \\(Z\\) \u306f\u898f\u683c\u5316\u5b9a\u6570\u3067\u3059. \\(Z\\) \u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\u53f3\u8fba\u3092 \\(\\alpha\\) \u306b\u3064\u3044\u3066\u7a4d\u5206\u3057\u3066 1 \u306b\u306a\u308b\u3088\u3046\u306b\u5b9a\u3081\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3059\u304c, \\(\\alpha\\) \u304c\u591a\u6b21\u5143\u306e\u5834\u5408\u306b\u306f\u7a4d\u5206\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u6975\u3081\u3066\u9ad8\u304f\u306a\u308a\u307e\u3059. \\(Z\\) \u3092\u76f4\u63a5\u8a55\u4fa1\u3059\u308b\u3053\u3068\u306a\u3057\u306b \\(P(\\alpha | D)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(\\alpha\\) \u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u308c\u3070, \u8a08\u7b97\u30b3\u30b9\u30c8\u3092\u5927\u304d\u304f\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e71\u6570\u3092\u751f\u6210\u3059\u308b \u3067\u7d39\u4ecb\u3057\u305f\u68c4\u5374\u6cd5\u306f\u307e\u3055\u306b\u305d\u306e\u3088\u3046\u306a\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3057\u305f. \u4ee5\u4e0b\u3067\u306f\u68c4\u5374\u6cd5\u3068\u4f3c\u305f\u8003\u3048\u65b9\u306b\u57fa\u3065\u3044\u3066, \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3092\u7d4c\u7531\u3057\u3066 \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u7d9a\u304d\u3092\u4f8b\u793a\u3057\u307e\u3059. \u305f\u3060\u3057 \\(\\tilde{P}(x)\\) \u306f \\(P(x)\\) \u304b\u3089\u898f\u683c\u5316\u5b9a\u6570 \\(Z\\) \u3092\u9664\u3044\u305f\u95a2\u6570\u3068\u3057\u307e\u3059. 2 \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u78ba\u7387\u5909\u6570 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \u78ba\u7387\u5909\u6570 \\(x_i\\) \u306b\u5bfe\u3059\u308b\u91cd\u307f \\(w_i = \\tilde{P}(x_i)/Q(x_i)\\) \u3092\u8a08\u7b97\u3059\u308b. \u4ee5\u4e0b\u306e\u5f0f\u306b\u3088\u3063\u3066 \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3068\u898f\u683c\u5316\u5b9a\u6570\u3092\u5f97\u308b. \\[ \\left\\langle{A(x)}\\right\\rangle_{x{\\sim}P(x)} = \\frac{\\sum_i w_i A(x_i)}{\\sum_i w_i}, \\qquad Z = \\frac{1}{n}\\sum_i w_i. \\] \u68c4\u5374\u6cd5\u3067\u306f \\(w_i\\) \u306b\u6bd4\u4f8b\u3059\u308b\u78ba\u7387\u3067 \\(x_i\\) \u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u304c, \u3053\u3053\u3067\u306f\u68c4\u5374\u305b\u305a\u306b \\(w_i\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u91cd\u307f\u3068\u3057\u3066\u6271\u3044\u307e\u3059. 3 4 \u4e0a\u8a18\u306e\u5f0f\u304c\u6b63\u3057\u3044\u3053\u3068\u306e\u78ba\u8a8d \\(w_i\\) \u3082 \\(x_i\\) \u3082\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306a\u306e\u3067, \u30c7\u30fc\u30bf\u6570\u304c\u5341\u5206\u306b\u591a\u3044\u3068\u304d\u306f, \\(w_i A(x_i)\\) \u306e\u5e73\u5747\u5024\u3092 \\(x \\sim Q(x)\\) \u306b\u5bfe\u3059\u308b\u671f\u5f85\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\frac{1}{n}\\sum_i w_i A(x_i) \\simeq \\left\\langle w_i A(x_i) \\right\\rangle_{x \\sim Q(x)} = \\int \\mathrm{d}x \\,Z\\frac{P(x)}{Q(x)}\\,A(x)\\,Q(x) = Z \\left\\langle A(x_i) \\right\\rangle_{x \\sim P(x)}. \\] \u540c\u69d8\u306e\u64cd\u4f5c\u3092 \\(w_i\\) \u306e\u5e73\u5747\u5024\u306b\u3082\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059. \\[ \\frac{1}{n}\\sum_i w_i \\simeq \\left\\langle w_i \\right\\rangle_{x \\sim Q(x)} = \\int \\mathrm{d}x \\,Z\\frac{P(x)}{Q(x)}\\,Q(x) = Z. \\] \u3088\u3063\u3066 \\(x \\sim P(x)\\) \u306b\u5bfe\u3059\u308b \\(A(x)\\) \u306e\u671f\u5f85\u5024\u304c\u9069\u5207\u306b\u8a08\u7b97\u3055\u308c\u3066\u3044\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u5186\u5468\u7387\u306e\u8a08\u7b97 \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u3082\u3061\u3044\u305f\u8a08\u7b97\u306e\u4f8b\u3068\u3057\u3066\u3088\u304f\u51fa\u3055\u308c\u308b\u3082\u306e\u306b\u5186\u5468\u7387\u306e\u8a08\u7b97\u304c\u3042\u308a\u307e\u3059. \u4e0a\u8a18\u306e\u8a2d\u5b9a\u306b\u3042\u308f\u305b\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u554f\u984c\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059. 1 \u8fba\u306e\u9577\u3055\u304c 2 \u3067\u3042\u308b\u6b63\u65b9\u5f62\u5185\u90e8\u306e\u4e00\u69d8\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3068\u3059\u308b. \u534a\u5f84 1 \u3067\u3042\u308b\u5186\u5185\u90e8\u306e\u4e00\u69d8\u5206\u5e03\u3092 \\(P(x)\\) \u3068\u3059\u308b. \\(\\tilde{P}(x) = 1\\) (\u5186\u5185\u90e8) / \\(0\\) (\u305d\u308c\u4ee5\u5916) \u3068\u3059\u308b. \u3053\u306e\u3068\u304d \\(\\int\\mathrm{d}x\\,P(x) = 1\\) \u3088\u308a\u898f\u683c\u5316\u5b9a\u6570 \\(Z\\) \u304c\u6b63\u65b9\u5f62\u306b\u5bfe\u3059\u308b\u5186\u306e\u9762\u7a4d\u306e\u5272\u5408\u3068\u306a\u308b. \u4ee5\u4e0b\u306b\u3053\u306e\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059. \\(Q(x)\\) \u304b\u3089 10\u2075 \u500b\u306e\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u534a\u5f84 1 \u306e\u5186\u306e\u9762\u7a4d\u3092\u63a8\u5b9a\u3057\u307e\u3057\u305f. \u30b0\u30e9\u30d5\u306f\u7dcf\u30c7\u30fc\u30bf\u6570\u3068\u63a8\u5b9a\u3055\u308c\u305f\u9762\u7a4d\u306e\u63a8\u79fb\u3092\u8868\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x , y : ( x ** 2 + y ** 2 < 1.0 ) A = 2 * 2 N = 100000 n = np . arange ( N ) + 1.0 x = gen . uniform ( - 1 , 1 , size = ( N )) y = gen . uniform ( - 1 , 1 , size = ( N )) w = A * func ( x , y ) print ( f 'estimated area: { w . sum () / N } ' ) fig = plt . figure () ax = fig . add_subplot () ax . semilogx ( n , w . cumsum () / n ) ax . semilogx ( n , np . pi * np . ones_like ( n )) ax . set_ylabel ( 'estimated area' ) ax . set_xlabel ( 'number of samples' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c estimated area: 3.14508 N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u306e\u8a08\u7b97 \u4e0a\u8a18\u3067\u306f 2 \u6b21\u5143\u7a7a\u9593\u306b\u5bfe\u3057\u3066\u8a08\u7b97\u3092\u3057\u307e\u3057\u305f\u304c, \u307e\u3063\u305f\u304f\u540c\u3058\u3053\u3068\u3092 N \u6b21\u5143\u7a7a\u9593\u3067\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046. N \u6b21\u5143\u7acb\u65b9\u4f53\u306b\u5185\u63a5\u3059\u308b N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u3092\u8003\u3048\u307e\u3059. \u306a\u304a N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ V_N = \\frac{\\pi^{N/2}}{\\Gamma(N/2 + 1)}. \\] \\(\\Gamma(x)\\) \u306f\u30ac\u30f3\u30de\u95a2\u6570\u3067\u3059. \u3053\u306e\u89e3\u6790\u89e3\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u53ce\u675f\u3057\u3066\u3044\u304f\u304b\u3092\u8abf\u3079\u307e\u3059. \u4ee5\u4e0b\u306b \\(N=15\\) \u306e\u8a08\u7b97\u4f8b\u3068\u7d50\u679c\u3092\u793a\u3057\u307e\u3057\u305f. \u5148\u7a0b\u3088\u308a\u30b5\u30f3\u30d7\u30eb\u6570\u3092\u5897\u3084\u3057\u3066 10\u2076 \u500b\u306e\u30c7\u30fc\u30bf\u3092 \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng from scipy.special import gamma import numpy as np gen = default_rng ( 2021 ) func = lambda x : (( x * x ) . sum ( axis = 1 ) < 1.0 ) N = 15 A = 2 ** N M = 1000000 n = np . arange ( N ) + 1.0 x = gen . uniform ( - 1 , 1 , size = ( M , N )) w = A * func ( x ) V = np . pi ** ( N / 2 ) / gamma ( N / 2 + 1 ) print ( f 'estimated area: { w . sum () / N : .5f } ( { V : .5f } )' ) fig = plt . figure () ax = fig . add_subplot () ax . semilogx ( n , w . cumsum () / n ) ax . semilogx ( n , V * np . ones_like ( n )) ax . set_ylabel ( 'estimated volume' ) ax . set_xlabel ( 'number of samples' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c estimated area: 0.22938 (0.38144) \u7d50\u679c\u306f\u89e3\u6790\u7684\u306b\u8a08\u7b97\u3055\u308c\u308b\u5024\u306b\u6bd4\u3079\u3066\u304b\u306a\u308a\u4f4e\u3044\u5024 (60% \u307b\u3069) \u306b\u306a\u308a\u307e\u3057\u305f. \u4f53\u7a4d\u306e\u63a8\u79fb\u3092\u898b\u3066\u307f\u308b\u3068, \u5148\u7a0b\u306e\u4f8b\u3068\u6bd4\u8f03\u3057\u3066\u5024\u304c\u307e\u3063\u305f\u304f\u53ce\u675f\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059. 10\u2075 \u500b\u3092\u8d85\u3048\u308b\u307e\u3067\u306f 0 \u3092\u793a\u3057\u3066\u304a\u308a, \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u30c7\u30fc\u30bf\u304c 1 \u3064\u3082 N \u6b21\u5143\u7403\u306b\u5165\u3089\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059. 5 \u6b21\u5143\u6570\u3092\u5909\u3048\u3066\u8a08\u7b97\u3092\u3057\u3066\u307f\u308b\u3068 \\(N\\) \u304c\u5c0f\u3055\u3044\u3046\u3061\u306f\u554f\u984c\u306a\u304f\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u304c, \\(N = 13\\) \u3042\u305f\u308a\u304b\u3089\u6025\u306b\u53ce\u675f\u3057\u306a\u304f\u306a\u308a\u307e\u3059. \u3053\u308c\u306f N \u6b21\u5143\u7acb\u65b9\u4f53\u306e\u4f53\u7a4d\u306f\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u307b\u3068\u3093\u3069\u3092\u58c1\u969b\u304c\u62c5\u3046\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u3067\u3059. N \u6b21\u5143\u7a7a\u9593\u3067\u306f\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u5206\u5e03 \\(P(x)\\) \u306e\u9055\u3044\u304c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u8a08\u7b97\u306e\u52b9\u7387\u306b\u5927\u304d\u304f\u95a2\u308f\u3063\u3066\u304d\u307e\u3059. \u30c7\u30fc\u30bf\u306e\u6b21\u5143 N \u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f, \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u671f\u5f85\u5024\u8a08\u7b97\u306f\u53ce\u675f\u6027\u306e\u9762\u3067\u5927\u304d\u306a\u554f\u984c\u3092\u62b1\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u306e\u547c\u3073\u65b9\u306f\u300e \u7d71\u8a08\u79d1\u5b66\u306e\u30d5\u30ed\u30f3\u30c6\u30a3\u30a2 12 \u8a08\u7b97\u7d71\u8a08II \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u305d\u306e\u5468\u8fba \u300f\u306b\u5023\u3044\u307e\u3057\u305f. \u21a9 \u3064\u307e\u308a \\(P(x) = \\tilde{P}(x)/Z\\) \u3067\u3059. \u21a9 \u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u89b3\u70b9\u304b\u3089\u306f, \u3042\u308b\u78ba\u7387\u3067\u63a1\u7528\u3059\u308b\u3053\u3068\u306f\u305d\u306e\u78ba\u7387\u306b\u6bd4\u4f8b\u3057\u305f\u91cd\u307f\u3092\u4ed8\u3051\u308b\u3053\u3068\u3068\u540c\u7fa9\u3067\u3059. \u30c7\u30fc\u30bf\u3092\u4e88\u3081\u9593\u5f15\u304f (\u68c4\u5374\u6cd5) \u304b\u671f\u5f85\u5024\u8a08\u7b97\u3067\u5bc4\u4e0e\u3092\u5727\u7e2e\u3059\u308b\u304b, \u3068\u3044\u3046\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u9055\u3044\u3067\u3059. \u21a9 \u68c4\u5374\u3059\u308b\u5834\u5408\u306b\u306f\u6b32\u3057\u3044\u30b5\u30f3\u30d7\u30eb\u6570\u3092\u5f97\u308b\u307e\u3067 loop \u3092\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c, Python \u306a\u3069\u4e00\u90e8\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f loop \u3092\u56de\u3059\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5927\u304d\u304f\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u305f\u3081, \u305d\u3046\u3044\u3063\u305f\u610f\u5473\u3067\u3082\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u4fbf\u5229\u3060\u3063\u305f\u308a\u3057\u307e\u3059. \u21a9 N \u6b21\u5143\u7acb\u65b9\u4f53\u306e\u4f53\u7a4d\u3068\u306e\u6bd4\u3092\u3068\u3063\u3066\u307f\u308b\u3068 \\(N = 15\\) \u306e\u3068\u304d\u306b\u304a\u3088\u305d 10\u207b\u2075 \u306a\u306e\u3067\u304a\u304a\u3088\u305d\u78ba\u7387\u901a\u308a\u3068\u8a00\u3048\u307e\u3059. \u21a9","title":"\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5"},{"location":"mcmc/static_monte_carlo/#_1","text":"\u3053\u3053\u3067\u306f\u30de\u30eb\u30b3\u30d5\u9023\u9396\u3067\u306f\u306a\u3044\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u7528\u3044\u3066\u8a08\u7b97\u3092\u3059\u308b\u65b9\u6cd5\u3068\u305d\u306e\u9650\u754c\u306b\u3064\u3044\u3066\u89e6\u308c\u307e\u3059. \u30de\u30eb\u30b3\u30d5\u9023\u9396\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u30b5\u30f3\u30d7\u30eb\u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3068\u5bfe\u6bd4\u3059\u308b\u305f\u3081\u306b, \u3053\u3053\u3067\u306f\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3059. 1","title":"\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5"},{"location":"mcmc/static_monte_carlo/#_2","text":"\u306f\u3058\u3081\u306b \u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b, \u3042\u308b\u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(x\\) \u304b\u3089\u8a08\u7b97\u3055\u308c\u308b\u91cf \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u77e5\u308a\u305f\u3051\u308c\u3070, \u78ba\u7387\u5206\u5e03\u95a2\u6570 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u5217 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u751f\u6210\u3057\u3066\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u624b\u6cd5\u304c\u4f7f\u3048\u307e\u3059. \u3053\u3053\u3067, \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u8a2d\u5b9a\u3092\u8003\u3048\u307e\u3059. \u9006\u95a2\u6570\u6cd5\u306e\u3088\u3046\u306b\u5909\u6570\u5909\u63db\u306b\u3088\u3063\u3066 \\(P(x)\\) \u306b\u5f93\u3046\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044. \\(P(x)\\) \u306f\u898f\u683c\u5316\u5b9a\u6570\u3092\u9664\u3044\u3066\u5bb9\u6613\u306b\u8a08\u7b97\u3067\u304d\u308b. \u5225\u306e\u8a00\u3044\u65b9\u3092\u3059\u308b\u3068, \\(P(x)\\) \u3068 \\(P(x')\\) \u306e\u6bd4\u306f\u5bb9\u6613\u306b\u8a08\u7b97\u3067\u304d\u308b\u304c, \\(P(x)\\) \u306e\u7d76\u5bfe\u7684\u306a\u5024\u306f\u308f\u304b\u3089\u306a\u3044. \u524d\u8005\u306b\u3064\u3044\u3066\u306f, \u89e3\u6790\u7684\u306a\u89e3\u304c\u3042\u308c\u3070\u305d\u308c\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u3044\u3046\u8a71\u306a\u306e\u3067\u7279\u306b\u89e3\u8aac\u306e\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059. \u307e\u305f, Bayes \u306e\u5b9a\u7406\u306b\u57fa\u3065\u3044\u3066\u7acb\u5f0f\u3059\u308b\u3068\u5f8c\u8005\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u306b\u5ea6\u3005\u906d\u9047\u3057\u307e\u3059. \u5b9f\u9a13\u30fb\u89b3\u6e2c\u306b\u3088\u3063\u3066\u30c7\u30fc\u30bf \\(D\\) \u3092\u5f97\u305f\u3068\u304d\u306b\u30d1\u30e9\u30e1\u30bf\u304c \\(\\alpha\\) \u3067\u3042\u308b\u78ba\u7387\u306f \\[ P(\\alpha | D) = \\frac{1}{Z}P(D | \\alpha)P(\\alpha), \\] \u3068\u66f8\u3051\u307e\u3059. \u3053\u3053\u3067 \\(Z\\) \u306f\u898f\u683c\u5316\u5b9a\u6570\u3067\u3059. \\(Z\\) \u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\u53f3\u8fba\u3092 \\(\\alpha\\) \u306b\u3064\u3044\u3066\u7a4d\u5206\u3057\u3066 1 \u306b\u306a\u308b\u3088\u3046\u306b\u5b9a\u3081\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3059\u304c, \\(\\alpha\\) \u304c\u591a\u6b21\u5143\u306e\u5834\u5408\u306b\u306f\u7a4d\u5206\u306e\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u6975\u3081\u3066\u9ad8\u304f\u306a\u308a\u307e\u3059. \\(Z\\) \u3092\u76f4\u63a5\u8a55\u4fa1\u3059\u308b\u3053\u3068\u306a\u3057\u306b \\(P(\\alpha | D)\\) \u306b\u5f93\u3046\u78ba\u7387\u5909\u6570 \\(\\alpha\\) \u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u308c\u3070, \u8a08\u7b97\u30b3\u30b9\u30c8\u3092\u5927\u304d\u304f\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \u4e71\u6570\u3092\u751f\u6210\u3059\u308b \u3067\u7d39\u4ecb\u3057\u305f\u68c4\u5374\u6cd5\u306f\u307e\u3055\u306b\u305d\u306e\u3088\u3046\u306a\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3057\u305f. \u4ee5\u4e0b\u3067\u306f\u68c4\u5374\u6cd5\u3068\u4f3c\u305f\u8003\u3048\u65b9\u306b\u57fa\u3065\u3044\u3066, \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3092\u7d4c\u7531\u3057\u3066 \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306e\u624b\u7d9a\u304d\u3092\u4f8b\u793a\u3057\u307e\u3059. \u305f\u3060\u3057 \\(\\tilde{P}(x)\\) \u306f \\(P(x)\\) \u304b\u3089\u898f\u683c\u5316\u5b9a\u6570 \\(Z\\) \u3092\u9664\u3044\u305f\u95a2\u6570\u3068\u3057\u307e\u3059. 2 \u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u78ba\u7387\u5909\u6570 \\(\\{x_i\\}_{i=1{\\ldots}n}\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3059\u308b. \u78ba\u7387\u5909\u6570 \\(x_i\\) \u306b\u5bfe\u3059\u308b\u91cd\u307f \\(w_i = \\tilde{P}(x_i)/Q(x_i)\\) \u3092\u8a08\u7b97\u3059\u308b. \u4ee5\u4e0b\u306e\u5f0f\u306b\u3088\u3063\u3066 \\(A(x)\\) \u306e\u671f\u5f85\u5024\u3068\u898f\u683c\u5316\u5b9a\u6570\u3092\u5f97\u308b. \\[ \\left\\langle{A(x)}\\right\\rangle_{x{\\sim}P(x)} = \\frac{\\sum_i w_i A(x_i)}{\\sum_i w_i}, \\qquad Z = \\frac{1}{n}\\sum_i w_i. \\] \u68c4\u5374\u6cd5\u3067\u306f \\(w_i\\) \u306b\u6bd4\u4f8b\u3059\u308b\u78ba\u7387\u3067 \\(x_i\\) \u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u304c, \u3053\u3053\u3067\u306f\u68c4\u5374\u305b\u305a\u306b \\(w_i\\) \u3092\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u91cd\u307f\u3068\u3057\u3066\u6271\u3044\u307e\u3059. 3 4 \u4e0a\u8a18\u306e\u5f0f\u304c\u6b63\u3057\u3044\u3053\u3068\u306e\u78ba\u8a8d \\(w_i\\) \u3082 \\(x_i\\) \u3082\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306a\u306e\u3067, \u30c7\u30fc\u30bf\u6570\u304c\u5341\u5206\u306b\u591a\u3044\u3068\u304d\u306f, \\(w_i A(x_i)\\) \u306e\u5e73\u5747\u5024\u3092 \\(x \\sim Q(x)\\) \u306b\u5bfe\u3059\u308b\u671f\u5f85\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ \\frac{1}{n}\\sum_i w_i A(x_i) \\simeq \\left\\langle w_i A(x_i) \\right\\rangle_{x \\sim Q(x)} = \\int \\mathrm{d}x \\,Z\\frac{P(x)}{Q(x)}\\,A(x)\\,Q(x) = Z \\left\\langle A(x_i) \\right\\rangle_{x \\sim P(x)}. \\] \u540c\u69d8\u306e\u64cd\u4f5c\u3092 \\(w_i\\) \u306e\u5e73\u5747\u5024\u306b\u3082\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059. \\[ \\frac{1}{n}\\sum_i w_i \\simeq \\left\\langle w_i \\right\\rangle_{x \\sim Q(x)} = \\int \\mathrm{d}x \\,Z\\frac{P(x)}{Q(x)}\\,Q(x) = Z. \\] \u3088\u3063\u3066 \\(x \\sim P(x)\\) \u306b\u5bfe\u3059\u308b \\(A(x)\\) \u306e\u671f\u5f85\u5024\u304c\u9069\u5207\u306b\u8a08\u7b97\u3055\u308c\u3066\u3044\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059.","title":"\u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u671f\u5f85\u5024\u8a08\u7b97"},{"location":"mcmc/static_monte_carlo/#_3","text":"\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u3082\u3061\u3044\u305f\u8a08\u7b97\u306e\u4f8b\u3068\u3057\u3066\u3088\u304f\u51fa\u3055\u308c\u308b\u3082\u306e\u306b\u5186\u5468\u7387\u306e\u8a08\u7b97\u304c\u3042\u308a\u307e\u3059. \u4e0a\u8a18\u306e\u8a2d\u5b9a\u306b\u3042\u308f\u305b\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u554f\u984c\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059. 1 \u8fba\u306e\u9577\u3055\u304c 2 \u3067\u3042\u308b\u6b63\u65b9\u5f62\u5185\u90e8\u306e\u4e00\u69d8\u5206\u5e03\u3092\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3068\u3059\u308b. \u534a\u5f84 1 \u3067\u3042\u308b\u5186\u5185\u90e8\u306e\u4e00\u69d8\u5206\u5e03\u3092 \\(P(x)\\) \u3068\u3059\u308b. \\(\\tilde{P}(x) = 1\\) (\u5186\u5185\u90e8) / \\(0\\) (\u305d\u308c\u4ee5\u5916) \u3068\u3059\u308b. \u3053\u306e\u3068\u304d \\(\\int\\mathrm{d}x\\,P(x) = 1\\) \u3088\u308a\u898f\u683c\u5316\u5b9a\u6570 \\(Z\\) \u304c\u6b63\u65b9\u5f62\u306b\u5bfe\u3059\u308b\u5186\u306e\u9762\u7a4d\u306e\u5272\u5408\u3068\u306a\u308b. \u4ee5\u4e0b\u306b\u3053\u306e\u8a2d\u5b9a\u306b\u5f93\u3063\u3066\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059. \\(Q(x)\\) \u304b\u3089 10\u2075 \u500b\u306e\u30c7\u30fc\u30bf\u3092\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u534a\u5f84 1 \u306e\u5186\u306e\u9762\u7a4d\u3092\u63a8\u5b9a\u3057\u307e\u3057\u305f. \u30b0\u30e9\u30d5\u306f\u7dcf\u30c7\u30fc\u30bf\u6570\u3068\u63a8\u5b9a\u3055\u308c\u305f\u9762\u7a4d\u306e\u63a8\u79fb\u3092\u8868\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng import numpy as np gen = default_rng ( 2021 ) func = lambda x , y : ( x ** 2 + y ** 2 < 1.0 ) A = 2 * 2 N = 100000 n = np . arange ( N ) + 1.0 x = gen . uniform ( - 1 , 1 , size = ( N )) y = gen . uniform ( - 1 , 1 , size = ( N )) w = A * func ( x , y ) print ( f 'estimated area: { w . sum () / N } ' ) fig = plt . figure () ax = fig . add_subplot () ax . semilogx ( n , w . cumsum () / n ) ax . semilogx ( n , np . pi * np . ones_like ( n )) ax . set_ylabel ( 'estimated area' ) ax . set_xlabel ( 'number of samples' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c estimated area: 3.14508","title":"\u5186\u5468\u7387\u306e\u8a08\u7b97"},{"location":"mcmc/static_monte_carlo/#n","text":"\u4e0a\u8a18\u3067\u306f 2 \u6b21\u5143\u7a7a\u9593\u306b\u5bfe\u3057\u3066\u8a08\u7b97\u3092\u3057\u307e\u3057\u305f\u304c, \u307e\u3063\u305f\u304f\u540c\u3058\u3053\u3068\u3092 N \u6b21\u5143\u7a7a\u9593\u3067\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046. N \u6b21\u5143\u7acb\u65b9\u4f53\u306b\u5185\u63a5\u3059\u308b N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u3092\u8003\u3048\u307e\u3059. \u306a\u304a N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059. \\[ V_N = \\frac{\\pi^{N/2}}{\\Gamma(N/2 + 1)}. \\] \\(\\Gamma(x)\\) \u306f\u30ac\u30f3\u30de\u95a2\u6570\u3067\u3059. \u3053\u306e\u89e3\u6790\u89e3\u306b\u5bfe\u3057\u3066\u3069\u306e\u3088\u3046\u306b\u53ce\u675f\u3057\u3066\u3044\u304f\u304b\u3092\u8abf\u3079\u307e\u3059. \u4ee5\u4e0b\u306b \\(N=15\\) \u306e\u8a08\u7b97\u4f8b\u3068\u7d50\u679c\u3092\u793a\u3057\u307e\u3057\u305f. \u5148\u7a0b\u3088\u308a\u30b5\u30f3\u30d7\u30eb\u6570\u3092\u5897\u3084\u3057\u3066 10\u2076 \u500b\u306e\u30c7\u30fc\u30bf\u3092 \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3044\u307e\u3059. import matplotlib.pyplot as plt from numpy.random import default_rng from scipy.special import gamma import numpy as np gen = default_rng ( 2021 ) func = lambda x : (( x * x ) . sum ( axis = 1 ) < 1.0 ) N = 15 A = 2 ** N M = 1000000 n = np . arange ( N ) + 1.0 x = gen . uniform ( - 1 , 1 , size = ( M , N )) w = A * func ( x ) V = np . pi ** ( N / 2 ) / gamma ( N / 2 + 1 ) print ( f 'estimated area: { w . sum () / N : .5f } ( { V : .5f } )' ) fig = plt . figure () ax = fig . add_subplot () ax . semilogx ( n , w . cumsum () / n ) ax . semilogx ( n , V * np . ones_like ( n )) ax . set_ylabel ( 'estimated volume' ) ax . set_xlabel ( 'number of samples' ) plt . tight_layout () plt . show () \u8a08\u7b97\u7d50\u679c estimated area: 0.22938 (0.38144) \u7d50\u679c\u306f\u89e3\u6790\u7684\u306b\u8a08\u7b97\u3055\u308c\u308b\u5024\u306b\u6bd4\u3079\u3066\u304b\u306a\u308a\u4f4e\u3044\u5024 (60% \u307b\u3069) \u306b\u306a\u308a\u307e\u3057\u305f. \u4f53\u7a4d\u306e\u63a8\u79fb\u3092\u898b\u3066\u307f\u308b\u3068, \u5148\u7a0b\u306e\u4f8b\u3068\u6bd4\u8f03\u3057\u3066\u5024\u304c\u307e\u3063\u305f\u304f\u53ce\u675f\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059. 10\u2075 \u500b\u3092\u8d85\u3048\u308b\u307e\u3067\u306f 0 \u3092\u793a\u3057\u3066\u304a\u308a, \\(Q(x)\\) \u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u30c7\u30fc\u30bf\u304c 1 \u3064\u3082 N \u6b21\u5143\u7403\u306b\u5165\u3089\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059. 5 \u6b21\u5143\u6570\u3092\u5909\u3048\u3066\u8a08\u7b97\u3092\u3057\u3066\u307f\u308b\u3068 \\(N\\) \u304c\u5c0f\u3055\u3044\u3046\u3061\u306f\u554f\u984c\u306a\u304f\u53ce\u675f\u3057\u3066\u3044\u304d\u307e\u3059\u304c, \\(N = 13\\) \u3042\u305f\u308a\u304b\u3089\u6025\u306b\u53ce\u675f\u3057\u306a\u304f\u306a\u308a\u307e\u3059. \u3053\u308c\u306f N \u6b21\u5143\u7acb\u65b9\u4f53\u306e\u4f53\u7a4d\u306f\u6b21\u5143\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u307b\u3068\u3093\u3069\u3092\u58c1\u969b\u304c\u62c5\u3046\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u3067\u3059. N \u6b21\u5143\u7a7a\u9593\u3067\u306f\u63d0\u6848\u5206\u5e03 \\(Q(x)\\) \u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308b\u5206\u5e03 \\(P(x)\\) \u306e\u9055\u3044\u304c\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u8a08\u7b97\u306e\u52b9\u7387\u306b\u5927\u304d\u304f\u95a2\u308f\u3063\u3066\u304d\u307e\u3059. \u30c7\u30fc\u30bf\u306e\u6b21\u5143 N \u304c\u5927\u304d\u3044\u5834\u5408\u306b\u306f, \u9759\u7684\u306a\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306b\u3088\u308b\u671f\u5f85\u5024\u8a08\u7b97\u306f\u53ce\u675f\u6027\u306e\u9762\u3067\u5927\u304d\u306a\u554f\u984c\u3092\u62b1\u3048\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059. \u3053\u306e\u547c\u3073\u65b9\u306f\u300e \u7d71\u8a08\u79d1\u5b66\u306e\u30d5\u30ed\u30f3\u30c6\u30a3\u30a2 12 \u8a08\u7b97\u7d71\u8a08II \u30de\u30eb\u30b3\u30d5\u9023\u9396\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3068\u305d\u306e\u5468\u8fba \u300f\u306b\u5023\u3044\u307e\u3057\u305f. \u21a9 \u3064\u307e\u308a \\(P(x) = \\tilde{P}(x)/Z\\) \u3067\u3059. \u21a9 \u671f\u5f85\u5024\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u89b3\u70b9\u304b\u3089\u306f, \u3042\u308b\u78ba\u7387\u3067\u63a1\u7528\u3059\u308b\u3053\u3068\u306f\u305d\u306e\u78ba\u7387\u306b\u6bd4\u4f8b\u3057\u305f\u91cd\u307f\u3092\u4ed8\u3051\u308b\u3053\u3068\u3068\u540c\u7fa9\u3067\u3059. \u30c7\u30fc\u30bf\u3092\u4e88\u3081\u9593\u5f15\u304f (\u68c4\u5374\u6cd5) \u304b\u671f\u5f85\u5024\u8a08\u7b97\u3067\u5bc4\u4e0e\u3092\u5727\u7e2e\u3059\u308b\u304b, \u3068\u3044\u3046\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u9055\u3044\u3067\u3059. \u21a9 \u68c4\u5374\u3059\u308b\u5834\u5408\u306b\u306f\u6b32\u3057\u3044\u30b5\u30f3\u30d7\u30eb\u6570\u3092\u5f97\u308b\u307e\u3067 loop \u3092\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c, Python \u306a\u3069\u4e00\u90e8\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f loop \u3092\u56de\u3059\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5927\u304d\u304f\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u305f\u3081, \u305d\u3046\u3044\u3063\u305f\u610f\u5473\u3067\u3082\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u4fbf\u5229\u3060\u3063\u305f\u308a\u3057\u307e\u3059. \u21a9 N \u6b21\u5143\u7acb\u65b9\u4f53\u306e\u4f53\u7a4d\u3068\u306e\u6bd4\u3092\u3068\u3063\u3066\u307f\u308b\u3068 \\(N = 15\\) \u306e\u3068\u304d\u306b\u304a\u3088\u305d 10\u207b\u2075 \u306a\u306e\u3067\u304a\u304a\u3088\u305d\u78ba\u7387\u901a\u308a\u3068\u8a00\u3048\u307e\u3059. \u21a9","title":"N \u6b21\u5143\u7403\u306e\u4f53\u7a4d\u306e\u8a08\u7b97"}]}